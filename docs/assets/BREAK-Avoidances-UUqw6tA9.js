const e={title:"人机验证技术",category:"AC01",summary:"也称CAPTCHA或验证码机制，通过设置挑战实现对人类操作和非人类操作区分。",description:"一般通过行为验证码、图文验证码等方式设置人机挑战，或通过收集鼠标移动轨迹、点击事件、屏幕点按压力、滑动轨迹、请求访问速率、3D陀螺仪等数据并分析的方式进行人机识别。注：人脸识别通常被认为是生物特征识别（A023）的一种。",limitation:"目前黑灰产催生出“打码平台”（AT0008），通过众包服务人工打码模式来完成突破人机识别挑战。对于人机识别挑战基本是降维打击，从理论上讲可导致所有显式的人机识别彻底失效。",references:[{title:"Captcha - 百度百科",link:"https://baike.baidu.com/item/Captcha/9630117?fr=aladdin"}],updated:"2024-01-11"},t={A0001:e,"A0001-001":{title:"图文式人机验证",category:"AC01",summary:"通过让挑战者识别图片中的内容并填写到输入框中完成验证的一种人机挑战",description:"图片验证码，也被称为图形验证码，是一种常见的用户身份验证方法。它通常由一组随机生成的数字、字母或符号组成，这些字符以图形的形式展示，通常会加入一些干扰元素，如线条、噪点或扭曲，以防止自动化工具（例如机器人或OCR软件）轻易识别。用户需要正确输入图片中显示的字符才能通过验证。这种方法主要用于防止恶意软件或非人类用户进行自动化操作。挑战点主要依赖于人类对不规则图文的识别能力与计算机识别能力差距。",limitation:"随着计算机计算能力的提升以及AI图片识别能力的增强，这种验证码被破解的概率越来越高。尤其是AI生成内容的发展，使得传统的图片验证码机制近乎失效。图片验证码的一个主流的进化方向是与行为验证码（A001-002）相结合，通过多维度的因素来完成人机识别挑战。",references:[{title:"GITHUB上的Captcha开源库",link:"https://github.com/search?q=captcha"}],updated:"2024-01-11"},"A0001-002":{title:"行为式人机验证",category:"AC01",summary:"一种结合图文识别与人类鼠标键盘、屏幕操作相结合的人机挑战模式",description:"目前常见的行为式验证码通常建立在人类识别图文信息基础上的点击、选择、滑动、拖动等动作，通过对比人类的行为与机器行为的差异来进行人机判断。因为除了图片识别外，还增加了行为鉴别，所以抗破解性会高于传统的图片验证码（A001-001）",limitation:"行为验证码的原理是在人类识别图文信息的基础上，依照对图文的理解去进行一定的键鼠动作。从图片验证码（A001-001）的局限性可见：图文信息的挑战越来越难以区分人机界限，行为验证码同样面临这样的问题。行为验证通过对人类的键鼠动作进行深度学习形成模型以识别机器自动化键鼠的平滑操作。但机器自动化同样可以通过对人类键鼠动作的深度学习来达到以假乱真的地步，会是未来面临的巨大挑战。",references:[{title:"AJ-Captcha(行为验证码，包含滑动拼图、文字点选两种方式)",link:"https://gitee.com/anji-plus/captcha"}],updated:"2024-01-11"},"A0001-003":{title:"语音人机验证",category:"AC01",summary:"语音验证码是一种人机验证技术，与图形验证码类似，但是通过声音进行验证。用户需要听取系统生成的语音内容，然后回答或执行相关操作，以证明其为真实的人类用户。语音验证码通常用于手机验证、语音导航系统和其他需要语音交互的场景。",description:"手段方法包括：数字串验证： 系统会生成包含数字的语音串，用户需要听取并输入正确的数字串以完成验证。语音指令： 用户可能被要求按照语音提示执行某些指令，例如说出特定的单词、数字或执行某项操作。语音识别技术： 语音验证码系统可能使用语音识别技术来确认用户的回答是否正确。",limitation:"语音验证码的局限性包括对语音质量、用户理解差异、嘈杂环境的敏感性，以及对残障用户不友好，同时可能增加计算资源的需求。",references:[],updated:"2024-01-16"},"A0001-004":{title:"静默人机验证",category:"AC01",summary:"静默人机验证是一种人机验证技术，通过分析用户的行为特征，判断用户是否为真实的人类用户。静默人机验证不需要用户进行任何额外的操作，用户无需主动输入任何信息，也无需进行任何额外的操作，即可完成验证。",description:"静默人机验证的手段方法包括：用户行为分析： 通过分析用户的行为特征，例如鼠标移动轨迹、点击事件、屏幕点按压力、滑动轨迹、请求访问速率、3D陀螺仪等数据，来判断用户是否为真实的人类用户。用户环境分析： 通过分析用户的环境特征，例如用户的IP地址、设备信息、浏览器信息、操作系统信息、地理位置等数据，来判断用户是否为真实的人类用户。用户行为与环境分析： 通过分析用户的行为特征和环境特征，来判断用户是否为真实的人类用户。",limitation:"静默人机验证的局限性包括对用户环境的敏感性，以及对残障用户不友好。",references:[],updated:"2024-01-25"}},i=Object.freeze(Object.defineProperty({__proto__:null,A0001:e,default:t},Symbol.toStringTag,{value:"Module"})),r={title:"接口签名校验",category:"AC01",summary:"对接口发送请求进行完整性签名和校验。",description:"也称接口验签或接口签名校验。因为无法保证用户端数据完整性，可以通过对请求数据进行哈希算法签名和服务端再校验来确保数据未经过篡改。需要注意的是：数据的完整性紧密依赖于哈希算法的强壮性，像MD5算法这种弱哈希算法已经较难保证数据的完整性。此外，目前接口签名更多地被应用在自动化请求识别对抗环节，严格来说接口签名本身并不具备人机识别能力，目前的对抗点更多是在于对自定义签名算法的复杂度和隐藏上，譬如终端应用加固（A013）、数据隐藏（A039）、算法白盒化、动态秘钥、WebAsm等。",limitation:"接口签名用来保证数据传输过程的完整性是没有问题的，不过因接口签名目前广泛被用在防止自动化的环节，这使得接口签名面临着强对抗。因为签名算法必须以某种形式存在于用户终端，相当于对用户可见。攻击者通过解析算法、调用签名接口、模拟点击等方式均可破解接口签名算法，来实现对请求的自动化伪造。",references:[{title:"smart-cloud - 一个开源 spring cloud 脚手架，具备接口签名功能",link:"https://github.com/smart-cloud/smart-cloud-examples#%E4%BA%8C%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8"}],updated:"2024-01-11"},o={A0002:r},a=Object.freeze(Object.defineProperty({__proto__:null,A0002:r,default:o},Symbol.toStringTag,{value:"Module"})),l={title:"云端反爬",category:"AC03",summary:"基于终端请求特征以及访问频次在服务端对请求进行爬虫识别和限制。",description:"也称爬虫云端识别。广义来说，凡是进行人机识别、自动化请求识别等能力均属于爬虫识别范畴。不过这里我们采用狭义定义，即：基于终端请求特征、用户身份和访问频次，在服务器端对高频自动化请求进行识别的能力。终端请求特征包括但不限于：设备指纹与终端标记跟踪（A021）、请求IP与HTTP头信息等数据。终端请求特征结合用户身份实现了对请求端的唯一性标记，结合服务端算法和单位时间的频率、次数限制配置，实现对高频自动化请求的识别和限制。",limitation:"爬虫识别依赖三个前提条件：1、请求者唯一性识别，2、请求者身份识别，3、请求频次计算。三者缺一不可。不能进行有效的唯一性识别，那么就可以通过更换IP，更换UA或设备指纹的方式绕过检测；不能对请求者身份识别，就不能区分好爬虫（搜索引擎）和坏爬虫；不能进行频次计算，就无法实施有效拦截。而这三个前提条件都有一定的有限性，不依赖于账号的终端和身份识别可以伪造，依赖账号的身份识别同样可以通过批量注册（R0030-001）对抗；请求者身份如果是通过请求特征识别的，那么就可以伪造；请求频次可以通过慢频爬取等方式绕过。此外爬虫识别同样具有滞后性，对于秒拍出价（R0003-001）和拍卖狙击（R0003-002）等场景无法第一时间识别和规避。所以单纯靠爬虫识别是解决不了自动化请求的问题的，必须要结合其他的规避手段。",references:[{title:"爬虫与反爬虫技术简介(请参见第二章节-反爬虫相关技术)",link:"https://mp.weixin.qq.com/s/dJhCQmpejY-GTE_a1ZpPsg"}],updated:"2024-01-11"},n={A0003:l},d=Object.freeze(Object.defineProperty({__proto__:null,A0003:l,default:n},Symbol.toStringTag,{value:"Module"})),c={title:"频率限制",category:"AC04",summary:"对访问者请求相关资源时进行访问频率控制。",description:"频率限制通常可以用在流量削峰等场景，其目的是为了缓解服务器压力，对于远超过人类正常请求的超高频数据请求的爬虫场景下会有较为直接的拦截作用，避免远超服务器承载的流量导致服务器拒绝服务器以及所引起的雪崩效应。",limitation:"与爬虫识别（A003）不同，频率限制并不会严格区分人类流量和自动化流量，这导致过低的阈值通常会将部分人类访问请求误拦截，而过高的阈值又会将低频请求爬虫放行，也因此并不能算成一种有效的爬虫识别与拦截手段。",references:[{title:"Kong实现API网关鉴权与调用频率限制",link:"https://zhuanlan.zhihu.com/p/92172480?ivk_sa=1024320u&utm_id=0"}],updated:"2024-01-11"},u={A0004:c},s=Object.freeze(Object.defineProperty({__proto__:null,A0004:c,default:u},Symbol.toStringTag,{value:"Module"})),m={title:"数量限制",category:"AC04",summary:"对访问者请求相关资源时进行访问数量控制。",description:"数量限制与频率限制（A004）类似，不过其控制点主要在于针对较长一段时间内的资源请求总量限制。而频率限制是在较短一段时间内的访问数量控制，对于较长时间的访问数量并不做限制。譬如短信验证码请求接口一般除了单位时间的频率限制外，还会根据IP、手机号、用户ID等标识进行小时级，甚至天级为单位的请求总量限制，一方面防止对资源的恶意消耗，另一方面还可以防止验证码滥用及短信轰炸。",limitation:"数量限制是一种较为宽泛的减损办法，即：允许损失或风险的发生，但有一定的容忍度。在不能准确识别或获得请求者唯一身份的情况下，效果会比较差。譬如短信恶意消耗（R0029）、CC攻击（R0029-001）等可以在不断更换IP的情况下来实现持续性滥用，而若不区分请求者身份进行总量的限制，又会影响正常用户的使用，譬如有些云服务限制每日请求的总流量，当流量超出后就阻拦任何请求。",references:[],updated:"2024-01-11"},A={A0005:m},p=Object.freeze(Object.defineProperty({__proto__:null,A0005:m,default:A},Symbol.toStringTag,{value:"Module"})),y={title:"恶意内容识别",category:"AC03",summary:"识别用户生成内容中的恶意内容。",description:"用户生成内容(UGC)包括但不限于：文字、图像、视频（流）、链接等，恶意内容按利益点与场景不同包括但不限于：违法、违规、欺诈、恶意推广等。简单文字类识别可以通过设置关键词，复杂文本内容可能还包括自然语言处理等。涉及图像或视频类内容除OCR文本识别外，还包含图像内容识别等。链接类除黑白名单外，部分场景下还需要结合域名&链接情报（A016-002）来实现更精确识别。",limitation:"恶意内容识别大都基于关键词或某种策略模型的评分机制，这使得攻击者可以通过关键词绕过，模型绕过或擦边评分机制等访问来对抗识别。",references:[],updated:"2024-01-11"},f={A0006:y,"A0006-001":{title:"人工内容审核",category:"AC03",summary:"通过人工的方式对用户生成内容进行合规性审核。",description:"人工审核通常用于对图片、视频、视频流的审核居多，或者在机器自动识别的基础上进行加强判断。",limitation:"由于人力限制以及效率限制，可以通过多账号、大批量的自动化请求来实现针对人力的拒绝服务。从而实现针对事前审核的长时间停摆，或者针对事后审核的恶意内容投放处置时间的大幅延长。",references:[],updated:"2024-01-11"},"A0006-002":{title:"自动恶意图片识别",category:"AC03",summary:"识别用户生成内容中的恶意图片内容。",description:"恶意图片识别一般包含两个部分，一是对图片中的文字的OCR识别，然后再进行恶意文本识别（A006-001）；二是对图片的展现内容的识别，譬如色情、暴力等，通常要结合机器图像识别算法来实现。",limitation:"目前图片OCR文字识别准确率较高，但同样受到自动恶意文本识别（A006-001）中的局限性影响。而对图片内容进行识别，目前准招率还很低，需要结合人工内容审核（A006-007）。",references:[],updated:"2024-01-11"},"A0006-003":{title:"自动恶意音频识别",category:"AC03",summary:"识别用户生成内容中的恶意音频内容。",description:"恶意音频识别也应包含两个部分，一是语音识别，将语音转换成文字后，再进行恶意文本识别（A006-001）；二是对音频所展现的内容识别，譬如色情、暴力等识别。",limitation:"攻击者可以使用对抗性样本来欺骗自动恶意音频识别系统，使其无法准确地检测和识别恶意音频。此外，自动恶意音频识别系统可能会受到环境噪声、语言变化、说话人变化等因素的影响，从而导致其准确性下降。",references:[],updated:"2024-01-11"},"A0006-004":{title:"自动恶意视频识别",category:"AC03",summary:"识别用户生成内容中的恶意视频内容。",description:"目前对恶意识别的通用办法是将视频关键帧提取成图片，然后进行恶意图片识别（A006-002）；将视频的音轨提取出来做自动恶意音频识别（A006-003）。随着AI生成内容的发展，计算机逐渐具备理解视频内容的能力，在未来有可能大幅提升识别效果",limitation:"同样会受到自动恶意图片识别（A006-002）局限性影响，也会受到自动恶意音频识别（A006-003）的局限性影响",references:[],updated:"2024-01-11"},"A0006-005":{title:"自动恶意链接识别",category:"AC03",summary:"识别用户生成内容中的恶意链接。",description:"目前主流处理链接有两种模式，一种是白名单模式，一种是黑名单模式。通常黑名单模式需要结合域名&链接威胁情报（A016-002）来实现。",limitation:"基于白名单的域名审计在面临任意链接跳转、资源滥用（R0069）时是无效的；基于黑名单的审计又存在可以轻易更换域名或链接的问题。所以很多情况下不能起到很好的效果。",references:[],updated:"2024-01-11"},"A0006-006":{title:"自动恶意文档识别",category:"AC03",summary:"识别用户生成内容中的恶意文档。",description:"恶意文档识别分为两个方面进行，一是文档内容识别，通过提取文档内容再进行恶意文本识别（A006-001）和恶意图片识别（A006-002）；二是文档本身的反病毒识别，通常需要结合反病毒软件进行。",limitation:"攻击者可以使用对抗性样本来欺骗自动恶意文档识别系统，使其无法准确地检测和识别恶意文档。此外，自动恶意文档识别系统可能会受到文件格式变化、语言变化、字体变化等因素的影响，从而导致其准确性下降。",references:[],updated:"2024-01-11"},"A0006-007":{title:"自动恶意文本识别",category:"AC03",summary:"识别用户生成内容中的恶意文本内容。",description:"简单的文本识别通常建立在黑名单关键词的基础上，复杂的文本识别会结合深度学习以及对文本内部的褒贬义分析等技术",limitation:"由于语言的多样性、多义性，以及中文多音、同音、形似等字符广泛存在，想绕过自动恶意文本识别去生成一段不改原义的恶意文本是十分容易的，一个典型的例子就是“火星文”，此外还有像拼音首字母代替等等各种各样的方式。因此在一些必要或极端场景下，需要介入人工内容审核（A006-007）作以补充。",references:[],updated:"2024-01-11"},"A0006-008":{title:"自动AI生成内容识别",category:"AC03",summary:"识别用户生成内容是否为AI生成。",description:"识别AI生成内容的技术包括文本中的语法和逻辑分析、图像中的纹理结构检测以及视频内容中的运动分析等，其中深度学习模型如卷积神经网络被广泛应用。",limitation:"这些方法面临着先进生成模型逐渐逼近真实表达的挑战，传统的规则和模式检测可能不足以区分生成和真实内容。",references:[{title:"AIGC 时代，分享 11 款超实用 AI 生成内容检测工具",link:"https://zhuanlan.zhihu.com/p/622169616"}],updated:"2024-01-11"}},g=Object.freeze(Object.defineProperty({__proto__:null,A0006:y,default:f},Symbol.toStringTag,{value:"Module"})),_={title:"多因素验证",category:"AC01",summary:"增加除主要身份识别手段（譬如账密等）外的其他维度身份验证因素。",description:"多因素验证（MFA，Multi-Factor Authentication），有时也被称为双因素验证，基本成为身份验证的主流方式，其存在很大程度上解决了由于账密泄露导致的身份冒充登录和滥用问题。常见的多因素验证因子有：短信验证码、邮箱验证码、基于时间的一次性密码（TOTP）等。",limitation:"MFA照比传统账密登录，可以大幅提升账户安全性，不过针对MFA的攻击也层出不穷，譬如：中间人（MitM）攻击、SIM卡交换攻击、Pass-The-Cookie攻击、MFA疲劳攻击等，这在一定程度上打破MFA构建的账户安全体系。",references:[{title:"多因素身份验证 - 百度百科",link:"https://baike.baidu.com/item/%E5%A4%9A%E5%9B%A0%E7%B4%A0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/17580929?fr=ge_ala"}],updated:"2024-01-11"},b={A0007:_,"A0007-001":{title:"短信验证",category:"AC01",summary:"通过短信发送验证码到用户手机，用户输入验证码完成身份验证。",description:"短信验证码是目前最常见的一种多因素验证方式，其优势在于：1、用户手机号码是唯一的，可以作为用户身份的唯一标识；2、短信验证码是一次性的，有效期短，有效期内可以有效防止验证码泄露导致的身份冒充登录和滥用问题；3、短信验证码是一种强制性的验证方式，用户无法绕过。",limitation:"因短信验证码是通过短信发送到用户手机，在短信服务提供商的发送过程、手机对验证码的接收过程均可能导致验证码泄露，从而导致身份冒充登录和滥用问题。此外，因短信验证码依赖手机号，而用户存在更换手机号的情况，这可能会导致新的手机号持有者获得之前手机号持有者账号权限。除此之外，短信验证码还存在短信轰炸（R0029）的问题。",references:[],updated:"2024-01-11"},"A0007-002":{title:"邮箱验证",category:"AC01",summary:"将验证码发送到用户邮箱，用户输入验证码完成身份验证。",description:"邮箱验证码与短信验证码类似，其优势在于：1、用户邮箱是唯一的，可以作为用户身份的唯一标识；2、邮箱验证码是一次性的，有效期短，有效期内可以有效防止验证码泄露导致的身份冒充登录和滥用问题；3、邮箱验证码是一种强制性的验证方式，用户无法绕过。",limitation:"因申请邮箱的难度较低，所以用邮箱验证码来防御批量注册（R0030-001）的效果较差。此外，有很多邮箱的登录过程并不需要进行多因素验证，这样在用户账密泄露的前提下，即便采取了邮箱验证码，仍然无法防止身份冒充登录和滥用问题。",references:[],updated:"2024-01-11"},"A0007-003":{title:"一次性密码",category:"AC01",summary:"基于时间的一次性密码，通过TOTP算法生成一次性密码，用户输入密码完成身份验证。",description:"TOTP是基于时间的一次性密码，其优势在于：1、TOTP是一次性的，有效期短，有效期内可以有效防止密码泄露导致的身份冒充登录和滥用问题；2、TOTP是一种强制性的验证方式，用户无法绕过。",limitation:"因TOTP是通过TOTP算法生成一次性密码，而TOTP算法是基于时间的，这使得TOTP算法的安全性依赖于时间同步，如果服务器时间与用户终端时间不同步，就会导致TOTP算法生成的密码不正确。",references:[{title:"OTP & TOTP 简单介绍",link:"https://zhuanlan.zhihu.com/p/484991482"}],updated:"2024-01-11"},"A0007-004":{title:"电话语音验证",category:"AC01",summary:"通过电话进行的人机验证技术，用户在接到电话后需要进行验证，通常是回答系统生成的语音提示或执行相关的操作。这种验证方式常用于用户账户的身份验证、重置密码等敏感操作，以提高安全性。",description:"手段方法包括：数字串验证： 用户接听电话后，系统会播放包含数字的语音串，用户需要听取并输入正确的数字串以完成验证。语音指令： 用户可能被要求按照语音提示执行某些指令，例如说出特定的单词、数字或执行某项操作，以证明其为真实用户。语音识别技术： 语音验证码系统可能使用语音识别技术来确认用户的回答是否正确。",limitation:"电话语音验证码的局限性包括对语音质量、用户理解差异、保密性、残障用户友好性以及滥用的潜在风险。",references:[],updated:"2024-01-16"}},P=Object.freeze(Object.defineProperty({__proto__:null,A0007:_,default:b},Symbol.toStringTag,{value:"Module"})),j={title:"提升服务可用性",category:"AC01",summary:"通过过滤流量、增加服务器计算资源等方式提升可承载的终端同时请求数量。",description:"提升服务可用性是一个系统性工程，一方面需要识别和拦截恶意流量；另一方面需要解决系统短板，提升响应效率。",limitation:"成本问题：提升服务可用性需要投入大量的人力、物力和财力，这可能会增加企业的成本。技术问题：在某些情况下，技术限制可能会影响服务的可用性。例如，某些应用程序可能无法在多个数据中心之间进行无缝切换。人为因素：人为因素也可能影响服务的可用性。例如，人为错误、恶意攻击等都可能导致服务不可用。",references:[],updated:"2024-01-11"},O={A0008:j,"A0008-001":{title:"增加计算资源",category:"AC01",summary:"通过增加服务器计算资源的方式提升可承载的终端同时请求数量。",description:"对于分布式架构来说，增加计算资源是最简单有效的提升可用性的方式",limitation:"与业务系统优化（A008-004）是相辅相成的关系，增加计算资源可以快速解决可用性问题，但会大幅增加运营成本。",references:[],updated:"2024-01-11"},"A0008-002":{title:"DDoS防护",category:"AC01",summary:"通过DDoS防护系统识别和过滤攻击流量",description:"通过DDoS防护系统过滤攻击流量可以使得更少的更真实的用户流量被服务器响应，是在系统遭受大规模攻击情况下的一种行之有效的办法。",limitation:"现有的DDoS防护系统对CC攻击的防御效果不佳，需结合云端反爬（A003）等手段",references:[],updated:"2024-01-11"},"A0008-003":{title:"前置CDN",category:"AC01",summary:"通过在访问资源前配置CDN来达到对静态资源的缓存与加速",description:"动静态分离是目前提升服务器响应效率的一种常见方法，对于不能实施动静态分离或静态资源负载大的情况下，通过前置CDN可以有效缓解服务器压力，提升响应效率。",limitation:"对静态资源的缓存加速较为明显，动态资源解决不了",references:[{title:"内容分发网络 - 百度百科",link:"https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265?fromtitle=CDN&fromid=420951&fromModule=lemma_search-box"}],updated:"2024-01-11"},"A0008-004":{title:"业务系统优化",category:"AC01",summary:"优化业务系统，提成响应效率，降低资源消耗",description:"通过精简流程、设置缓存、优化算法、增加并发、调整架构等方式降低业务请求对系统的消耗，减少响应时间，增加请求承载量。",limitation:"实施周期较长，适用于长期规划，远水解不了近渴。需要投入较大的研发成本。",references:[],updated:"2024-01-11"},"A0008-005":{title:"增加业务资源",category:"AC01",summary:"通过增加业务资源的方式在一定程度上解决资源紧缺问题。",description:"譬如增加商品数量、名额数量、增加班次、航次等。",limitation:"对于某些可以获得高额回报的资源，很难直接通过增加资源的方式解决资源紧缺问题。",references:[],updated:"2024-02-01"}},C=Object.freeze(Object.defineProperty({__proto__:null,A0008:j,default:O},Symbol.toStringTag,{value:"Module"})),S={title:"时间限制",category:"AC04",summary:"通过时间控制相关资源仅在一段时间内有效。",description:"一个时间限制的典型场景就是短信验证码发送，通过限制验证码的发送时间间隔，达到避免对特定手机号实施短信轰炸的目的。在密码碰撞、支付密码错误等场景也常会通过时间限制避免账号沦陷以及金钱损失。时间限制有时也会被应用在用户内容发送场景，通过进行一定限制避免实施内容轰炸或延缓来自自动化请求的压力。",limitation:"时间限制通常是一种“影响业务”的规避手段，会对正常用户请求或服务造成一定影响，因此通常会取一个比较折中的时间，使得既能被正常用户接受，又能最大限度拦截攻击者。",references:[],updated:"2024-01-11"},T={A0009:S},I=Object.freeze(Object.defineProperty({__proto__:null,A0009:S,default:T},Symbol.toStringTag,{value:"Module"})),h={title:"终端异常环境检测",category:"AC02",summary:"对应用运行环境及用户请求环境进行识别，发现异常环境。",description:"异常环境识别通过获取包括不限于终端静默人机挑战、应用合法性、进程合法性、是否越狱（ROOT）、陀螺仪状态、是否外挂插件等数十种数据的获取、分析和判断。业务场景下的异常环境识别一般是通过业务终端访问系统实现的。根据业务访问模式的不同，终端访问系统可能是浏览器、APP移动应用、桌面级程序等形式。异常环境识别能力严重依赖业务终端访问系统的权限，由于用户授权限制以及法律法规限制，异常环境识别具有一定的局限性，且也受到对抗和终端数据完整性制约。",limitation:"因为异常环境检测都是在用户可控的终端上展开的，所以最终效果取决于对抗性。从理论上讲，因为终端可控，那么就总是能够绕过各种异常环境检测策略，最终就是个时间成本与能力高低问题。",references:[],updated:"2024-01-11"},E={A0010:h,"A0010-001":{title:"模拟器检测",category:"AC02",summary:"对APP是否运行在手机模拟器上进行识别",description:"模拟器常常被用来刷单，如何准确的识别模拟器成为App开发中的一个重要模块，目前也有专门的公司提供相应的SDK供开发者识别模拟器。 目前流行的Android模拟器大概分为两种，一种是基于Qemu，另一类是基于Genymotion(VirtualBox类)，网上现在流行用一些模拟器特征进行鉴别，比如：通过判断IMEI是否全部为0000000000格式；判断Build中的一些模拟器特征值；匹配Qemu的一些特征文件以及属性；通过获取cpu信息，将x86的给过滤掉（真机一般都是基于ARM）等",limitation:"手机模拟器检测的对抗点有两处：一是对APP采集的信息提前进行伪造，二是对APP采集后上传的信息进行伪造。",references:[{title:"Android模拟器识别检测技术",link:"https://blog.csdn.net/liuno0/article/details/124279075"}],updated:"2024-01-11"},"A0010-002":{title:"云手机检测",category:"AC02",summary:"对APP是否运行在云手机上进行识别",description:"可以通过识别手机模拟器（A010-001）的方式来进行云手机识别，此外设备指纹、异常环境监测、出网IP等也可用来进行云手机识别。由于云手机通常不能修改ROM，大部分甚至不能获得ROOT权限，所以对抗效果通常会好于手机模拟器检测（A010-001）",limitation:"随着云手机、云游戏的不断发展和普及，APP厂商将不能采用“云”即是“黑”的一棒子打死的策略，否则将面临大量用户投诉，这为未来黑产利用云手机留下了空间。",references:[],updated:"2024-01-11"},"A0010-003":{title:"ROOT/越狱检测",category:"AC02",summary:"对APP是否运行在被Root或越狱破解的设备上进行识别",description:"通过Root或越狱后的特征来进行判断，譬如：可以查看发布的系统版本，是test-keys（测试版），还是release-keys（发布版）；检查是否存在Superuser.apk；检测在常用目录下是否存在su；使用which命令查看是否存在su；执行su，看能否获取到root权限；是否存在busybox；访问/data目录，查看读写权限等",limitation:"对于ROOT机反检测有两种策略：其一是对应用下手，干预应用的ROOT检测行为；另外一个思路则是对系统下手，隐藏系统自身ROOT相关的特征。通过还原手机ROOT检测的每一条策略和规则，就能提前预制反检测策略。譬如开源的RootCloak就可以通过hook调用api的函数用来对抗root监测",references:[{title:"Android root检测方法小结",link:"https://www.lmlphp.com/user/58076/article/item/637693/"}],updated:"2024-01-11"},"A0010-004":{title:"外挂检测",category:"AC02",summary:"对程序是否被注入运行时指令或外挂程序进行识别",description:"通过对程序运行时进行完整性校验、关键词或DLL列表检测，对进行列表、窗口标题关键词等进行判断来检测是否存在外挂程序",limitation:"与手机ROOT/越狱检测（A010-003）的局限性一样，通过分析并还原检测过程，阻断或提供Hook后的虚假值即可绕过外挂检测策略。不过因外挂通常用在游戏中，而游戏的数据包可读性比基于HTTP协议的APP应用差许多，如果将外挂检测逻辑和数据回传隐藏在正常的游戏运行和通信中，将加大外挂反检测的难度。",references:[{title:"浅谈外挂常识和如何防御",link:"https://zhuanlan.zhihu.com/p/490189706"}],updated:"2024-01-11"},"A0010-005":{title:"多开检测",category:"AC02",summary:"对APP是否在终端上被多开进行识别",description:"游戏多开检测只是对游戏的进程数进行限制，分为事前检测、事中检测、和事后检测。事中检测和事后检测往往没有提示，是游戏公司封号、处罚的手段，事前检测即禁止游戏多开，包括：枚举进程的多开检测、互斥对象多开检测、信号量多开检测、窗口多开检测、共享内存检测多开等方法",limitation:"通过分析并还原检测过程，阻断或提供Hook后的虚假值即可绕过多开检测策略。",references:[{title:"游戏多开检测的几种实现方法及破解方法参考",link:"https://blog.csdn.net/weixin_40582034/article/details/125960599"}],updated:"2024-01-11"},"A0010-006":{title:"调试器检测",category:"AC02",summary:"对程序是否运行被调试进行识别",description:"最基本的调试器检测技术就是检测进程环境块(PEB)中的BeingDebugged标志。PEB另一个成员被称作NtGlobalFlag（偏移0x68），壳也通过它来检测程序是否用调试器加载。Kernel32!CheckRemoteDebuggerPresent()是另一个可以用于确定是否有调试器被附加到进程的API。在调试器中步过INT3和INT1指令的时候，由于调试器通常会处理这些调试中断，所以异常处理例程默认情况下将不会被调用，Debugger Interrupts就利用了这个事实。这样壳可以在异常处理例程中设置标志，通过INT指令后如果这些标志没有被设置则意味着进程正在被调试。更多方式请阅读参考资料。",limitation:"通过分析并还原检测过程，阻断或提供Hook后的虚假值即可绕过调试器检测策略。",references:[{title:"脱壳的艺术--2 调试器检测技术",link:"https://blog.csdn.net/iiprogram/article/details/2248506"}],updated:"2024-01-11"},"A0010-007":{title:"虚拟机检测",category:"AC02",summary:"对APP是否运行在虚拟机中进行识别",description:"虚拟机运行环境检测，指的是软件能够判断当前是不是在虚拟机中运行，根据判断结果，做对应的处理。从恶意软件的视角，它可以在虚拟机中改变自身行为，加大分析难度。从软件自身安全出发，用于防止被逆向调试以及某些场景下的非正常使用。",limitation:"虚拟机检测方法主要是通过检测一些环境属性和文件，但是这些方法并不是绝对可靠的，因为黑灰产业者可以通过修改虚拟机的环境属性和文件来规避检测",references:[{title:"虚拟机运行环境检测",link:"https://www.cnblogs.com/cherishui/p/14366072.html"}],updated:"2024-01-11"},"A0010-008":{title:"无头浏览器检测",category:"AC02",summary:"对APP是否运行在无头浏览器中进行识别",description:"无头浏览器检测，指的是软件能够判断当前是不是在无头浏览器中运行，根据判断结果，做对应的处理。从恶意软件的视角，它可以在无头浏览器中改变自身行为，加大分析难度。从软件自身安全出发，用于防止被逆向调试以及某些场景下的非正常使用。",limitation:"无头浏览器检测方法主要是通过检测一些环境属性和文件，但是这些方法并不是绝对可靠的，因为黑灰产业者可以通过修改无头浏览器的环境属性和文件来规避检测",references:[{title:"用JavaScript检测当前浏览器是无头浏览器",link:"https://zhuanlan.zhihu.com/p/149491639"}],updated:"2024-01-11"},"A0010-009":{title:"HOOK检测",category:"AC02",summary:"对APP是否运行在HOOK环境中进行识别",description:"HOOK检测，指的是软件能够判断当前是不是在HOOK环境中运行，根据判断结果，做对应的处理。从恶意软件的视角，它可以在HOOK环境中改变自身行为，加大分析难度。从软件自身安全出发，用于防止被逆向调试以及某些场景下的非正常使用。",limitation:"HOOK检测方法主要是通过检测一些环境属性和文件，但是这些方法并不是绝对可靠的，因为黑灰产业者可以通过修改HOOK环境的环境属性和文件来规避检测",references:[{title:"Android hook、检测及对抗相关",link:"https://blog.csdn.net/jinganggiao/article/details/126932091"}],updated:"2024-01-16"}},M=Object.freeze(Object.defineProperty({__proto__:null,A0010:h,default:E},Symbol.toStringTag,{value:"Module"})),k={title:"踢出登录态",category:"AC04",summary:"将用户踢出登录态，并在服务端注销当前登录状态。",description:"踢出登录态属于一种轻量级的用户处罚策略（A020）。其中一些情况是为了用户账户安全考虑的，譬如Cookies复用与异地登录的识别与处置措施；而另一些情况是希望登录态的使用者重新经历身份认证（A018）登录挑战，譬如很多爬虫会利用登录态进行数据爬取，因登录挑战过程一般包含账密挑战、人机识别挑战（A001）和多因素验证（A007）挑战，可以有效的干扰自动化爬虫的爬取进程。",limitation:"有很多应用支持多点登录，这就意味着即便踢出了登录态，用户仍然可以通过其他登录态进行访问。此外，因踢出登录态有效干预了黑产号商的Cookies买卖流程，目前有很多黑产号商提供了一键登录器，即便踢出登录态，也可以一键实现重新登录。",references:[],updated:"2024-01-11"},z={A0011:k},D=Object.freeze(Object.defineProperty({__proto__:null,A0011:k,default:z},Symbol.toStringTag,{value:"Module"})),v={title:"强制改密",category:"AC04",summary:"对用户下发强制改密操作，用户必须成功改密后方可登录成功。",description:"强制改密一般会应用在撞库成功登录、密码泄露、异地登录、长期未登录、密码过期、默认密码未修改等场景，其主要目的还是希望通过改密，以及改密过程中的身份认证（A018）来判断账号所有权，降低用户账密泄露风险。",limitation:"强制改密比较影响用户体验",references:[],updated:"2024-01-11"},B={A0012:v},R=Object.freeze(Object.defineProperty({__proto__:null,A0012:v,default:B},Symbol.toStringTag,{value:"Module"})),H={title:"终端应用加固",category:"AC01",summary:"对前端JS脚本或客户端APP进行代码级别混淆、增加反调试等功能。",description:"访问端代码混淆一方面可以在一定程度上解决黑灰产直接逆向访问端代码，分析资源访问逻辑，实现业务自动化及数据爬取问题；另一方面也能增加破解终端人机挑战、异常环境检测（A010）、接口签名（A002）等业务安全防护手段的难度。不过因为混淆后的代码依旧在用户访问端，所以在不考虑时间成本和人力成本的前提下，混淆代码最终还是具备被完全还原的可行性。所以访问端代码混淆仅是一种降低黑灰产ROI的手段。不过若按照PDR中的Pt>Dt+Rt公式来看，如果防守者有能力将代码混淆的周期降低到破解周期内，则有可能达到长期防护的效果。反调试既可以是一种针对调试的阻断，也可以是一种针对调试的干扰，譬如可以实现非调试环境下是一种程序运行逻辑，调试环境下是另外一种程序运行逻辑。",limitation:"加固后的应用仍然可以被反编译：虽然应用加固可以增加反编译的难度，但是并不能完全防止应用被反编译。黑客可以通过各种手段来破解加固后的应用，从而获取应用的源代码和敏感信息。加固后的应用可能存在兼容性问题：由于加固会修改应用的代码和结构，因此可能会导致应用出现兼容性问题。例如，加固后的应用可能无法在某些设备上运行或者出现崩溃等问题。加固后的应用可能存在性能问题：由于加固会增加应用的体积和运行时开销，因此可能会导致应用出现性能问题。例如，加固后的应用可能启动较慢或者占用较多内存等问题。",references:[],updated:"2024-01-11"},w={A0013:H,"A0013-001":{title:"Android应用加固",category:"AC01",summary:"通过防逆向、防篡改、防调试、防恶意软件等方式来加固Android应用程序",description:"对DEX的多种保护模式结合VMP虚拟机，对关键代码、核心逻辑进行加密保护，避免通过IDA、JEB、JADX、APKTool、Readelf等逆向工具分析获取源码；对App应用每个文件分配唯一识别指纹，结合签名及文件的完整性校验，替换任何一个文件会导致无法运行，防止广告病毒植入、二次打包、功能屏蔽等恶意破解；多重加密技术结合底层对抗技术防止代码注入，防止Java层/C层动态调试，可有效抵挡动态调试、内存DUMP、代码注入、HOOK等恶意攻击；有效检测并对抗：ROOT、模拟器、界面劫持、多开器、Xposed插件、frida等各种HOOK工具（摘自dun.163.com）",limitation:"可能会有兼容性问题及运行性能问题",references:[],updated:"2024-01-11"},"A0013-002":{title:"iOS应用加固",category:"AC01",summary:"通过防逆向、防篡改、防调试、防恶意软件等方式来加固iOS应用程序",description:"对字符串进行加密保护，防止通过IDA等工具获取关键词定位核心业务代码；对应用代码进行多种方式混淆处理，提高代码的复杂度和逆向分析难度但不影响原始逻辑和性能；对应用的符号进行混淆,增加代码逆向难度；高级的反调试技术，防止攻击者、恶意分析者动态调试分析程序；对应用的二进制代码进行保护，防止逆向分析工具将代码反编译为伪代码（Pseudo-Code）；对应用中的数值进行保护，防止修改器对数值进行篡改，比如游戏中的攻击力、血量等值；对应用进行完整性保护，防止破解者对应用的篡改、重打包等作弊行为（摘自dun.163.com）",limitation:"可能会有兼容性问题及运行性能问题",references:[],updated:"2024-01-11"},"A0013-003":{title:"H5小程序加固",category:"AC01",summary:"通过防逆向、防篡改、防调试、防恶意软件等方式来加固H5应用程序",description:"利用加密技术对抗动态调试，防止代码被调试破解、数据被套取；支持H5应用强绑定指定域名，防止应用域名被篡改，导致用户被导流甚至被欺诈；对代码、脚本文件进行加密，包括动态加解密字符串、函数名、表达式等，对变量进行混淆，提高破解难度。同时支持代码文件压缩，减少应用体积；利用加密技术对数据进行保护，防止网络抓包分析获取敏感数据（摘自dun.163.com）",limitation:"可能会有兼容性问题及运行性能问题",references:[],updated:"2024-01-11"},"A0013-004":{title:"桌面应用加固",category:"AC01",summary:"通过防逆向、防篡改、防调试、防恶意软件等方式来加固桌面应用程序",description:"对应用程序进行加密保护，防止应用被反编译；对应用程序进行混淆处理，提高代码的复杂度和逆向分析难度但不影响原始逻辑和性能；对应用的符号进行混淆,增加代码逆向难度；高级的反调试技术，防止攻击者、恶意分析者动态调试分析程序；对应用的二进制代码进行保护，防止逆向分析工具将代码反编译为伪代码（Pseudo-Code）；对应用中的数值进行保护，防止修改器对数值进行篡改，比如游戏中的攻击力、血量等值；对应用进行完整性保护，防止破解者对应用的篡改、重打包等作弊行为",limitation:"可能会有兼容性问题及运行性能问题",references:[],updated:"2024-01-11"}},K=Object.freeze(Object.defineProperty({__proto__:null,A0013:H,default:w},Symbol.toStringTag,{value:"Module"})),L={title:"防篡改机制",category:"AC01",summary:"防篡改机制是指为了确保数据、软件或信息的完整性而采取的一系列技术和措施。这样的机制旨在阻止未经授权的修改、篡改或损坏，以确保数据的可信度和准确性。",description:"一些常见的防篡改手段和实践包括：数字签名： 使用非对称加密算法为数据生成数字签名，验证签名可以确认数据的完整性和来源的真实性。哈希算法： 对数据进行哈希运算，生成固定长度的哈希值，即使数据发生微小变化，哈希值也会发生较大变化，用于验证数据完整性。访问控制： 限制对数据和系统的访问权限，以防止未经授权的修改。安全传输协议： 使用安全传输协议（如HTTPS）来确保数据在传输过程中的完整性。日志记录： 记录关键操作和事件，以便追踪和验证数据的修改历史。",limitation:"局限性：密钥管理： 如果密钥管理不当，数字签名等机制可能受到攻击，影响数据的完整性验证。依赖可信环境： 防篡改机制的有效性依赖于系统或环境的整体安全性，如果整体环境不受信任，机制可能受到破坏。性能影响： 有些防篡改手段可能对系统性能产生一定的影响，特别是在大规模数据处理的情况下。人为因素： 人为错误、疏忽或内部威胁可能绕过防篡改机制，影响数据的完整性。",references:[],updated:"2024-01-11"},x={A0014:L,"A0014-001":{title:"终端防篡改",category:"AC01",summary:"保证访问端程序完整性，防止被恶意篡改",description:"对终端应用及附属文件进行签名和完整性校验，确保程序在运行时内容植入、二次打包、功能屏蔽等情况下无法正常运行。",limitation:"攻击者可以使用反编译工具来分析程序并找到防篡改算法的实现方式。此外，攻击者还可以使用调试工具来跟踪程序的执行过程并找到防篡改算法的漏洞。",references:[],updated:"2024-01-11"},"A0014-002":{title:"服务器防篡改",category:"AC01",summary:"服务器防篡改是指为了保护服务器系统免受未经授权的访问、修改或损害而采取的一系列安全措施。这旨在确保服务器上的软件、配置和数据的完整性，防止恶意攻击者对服务器进行篡改。",description:"以下是一些常见的服务器防篡改手段：完整性检查： 使用哈希算法对服务器上的关键文件和系统镜像进行定期的完整性检查，以发现是否有篡改。实时监控： 部署实时监控系统，监视服务器的活动和文件系统的变化，及时发现异常行为。安全配置： 针对服务器操作系统和相关服务进行安全配置，关闭不必要的服务、端口，并采用最小权限原则。防火墙和入侵检测系统（IDS）： 部署防火墙和IDS来监测和阻止恶意流量，减少未经授权的访问。定期漏洞扫描和补丁管理： 定期扫描服务器以发现可能的漏洞，并及时应用补丁，以防止攻击者利用已知漏洞进行入侵。访问控制： 使用强密码策略、多因素身份验证等措施限制对服务器的访问，确保只有授权用户可以访问。加密通信： 使用加密通信协议（如SSH、HTTPS）以保护服务器和客户端之间的通信。",limitation:"局限性：零日漏洞： 防篡改机制可能无法防御尚未被公开的零日漏洞，因为此类漏洞尚未有相应的修复。误报和漏报： 安全工具可能产生误报或漏报，导致对正常操作的误解或对真实威胁的忽略。人为因素： 管理员错误配置、疏忽或内部威胁可能绕过防篡改措施。性能影响： 强大的防篡改措施有时可能对服务器性能产生一定的影响。",references:[],updated:"2024-01-11"}},F=Object.freeze(Object.defineProperty({__proto__:null,A0014:L,default:x},Symbol.toStringTag,{value:"Module"})),U={title:"风控策略",category:"AC03",summary:"通过现有或增加风控策略来实现特殊用户或行为标记和管控。",description:"风控是在业务安全中应用得最多的一种手段，也是防御重特大业务运营风险的必要利器。风控的安全能力水位严重依赖于策略，这既是优势也是劣势。优势在于业务防护的灵活性，劣势在于对业务防护场景的覆盖性。此外，因为风控可以具备较多的风险处置环节与后置处置逻辑，可以避免跟攻击者站立在强对抗环节，达到策略长期有效的目的。不过，也正因为如此，照比其他一些安全防护手段，风控在某些情况下具有滞后性，譬如有些识别和处置是在业务流程环节结束后进行的，这有可能会造成一定的经济损失，也有可能会带来不好的用户体验。",limitation:"风控策略可能会受到数据质量、数据来源、数据处理等因素的影响，从而导致风险评估不准确。此外，风控策略还可能会受到技术手段的限制，例如，某些欺诈手段可能无法被传统的风控技术所检测出来。",references:[{title:"金融风控系统的演进与升级:从第一代到第四代",link:"https://zhuanlan.zhihu.com/p/569034938"}],updated:"2024-01-11"},G={A0015:U},N=Object.freeze(Object.defineProperty({__proto__:null,A0015:U,default:G},Symbol.toStringTag,{value:"Module"})),J={title:"威胁情报",category:"AC03",summary:"通过黑IP库、黑手机号库等威胁情报对黑产身份进行标记。",description:"也经常被简写为TI或CTI。威胁情报的定义可以很广义：所有可以标识好与坏的数据标签都属于威胁情报。威胁情报比较考验情报运营能力以及情报质量，需要长期并实时保持数据的鲜活性。一般会把准召率作为威胁情报好坏的度量标准，好的威胁情报可以直接作为一种防护手段使用，而质量差的威胁情报则需要结合风控策略（A015）来使用，避免覆盖不全或大规模误报。",limitation:"威胁情报的局限性主要包括信息来源的不完整性、时效性的挑战、过多的虚假信息、难以分辨针对性攻击、难以量化真实影响、跨组织共享合作的困难以及对隐私和法规的合规性问题。",references:[{title:"威胁情报 - 百度百科",link:"https://baike.baidu.com/item/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/23311172?fr=ge_ala"}],updated:"2024-01-11"},q={A0016:J,"A0016-001":{title:"IP情报",category:"AC03",summary:"对IP的风险系数、类型等进行标识",description:"IP情报是指关于IP地址的各种信息，狭义的IP情报可能只包含IP的风险系数，广义的IP情报还包含：地理位置、ISP（互联网服务提供商）信息、ASN（自治系统号）、恶意活动历史、使用者、代理检测、网络流量分析等。",limitation:"IP威胁情报的局限性在于：它只能提供有限的信息，无法提供完整的威胁情况。此外，由于网络攻击者不断变换攻击方式和手段，IP情报的有效性也会受到影响。因此，在使用IP情报时，需要结合其他安全技术和手段，以提高网络安全防护的效果。",references:[],updated:"2024-01-11"},"A0016-002":{title:"域名&链接威胁情报",category:"AC03",summary:"对恶意域名或链接进行标识",description:"与IP情报（A016-001）相比，域名&链接情报的准确性和有效性都较高，但使用场景受限：IP情报基本可以适用于任何网络请求的场景，而域名&链接情报通常只适用于恶意链接识别（A006-005）场景",limitation:"针对域名的威胁情报存在范围太广的问题，导致针对域名进行封禁容易出现误拦截；而针对链接的情报又存在范围太小的问题，导致修改一下链接描述符就能绕过检测。",references:[],updated:"2024-01-11"},"A0016-003":{title:"手机号情报",category:"AC03",summary:"对黑产手机号、二次号等进行标识",description:"黑产手机号大都从风控系统、风险设备识别对抗等维度产生；而二次号通常来源于运营商，通过对接运营商接口，业务可以及时获得手机号的在用和二次身份绑定状态等。",limitation:"黑产分子可以通过租用真人手机号的方式来获取号源，此外拦截卡（真人手机植入木马拦截短信）在黑产市场的占有率也颇高，成为当前最主流的恶意黑手机号。这些手机号虽然被用来开展黑灰产工作，但是却不能作为黑手机号进行直接拦截。",references:[],updated:"2024-01-11"},"A0016-004":{title:"IOC妥协指标情报",category:"AC03",summary:"IOC（Indicator of Compromise）妥协指标情报是指用于检测和确认计算机系统或网络是否受到威胁或遭到侵害的特定标志和特征。这些标志可以包括特定的文件哈希、IP地址、域名、恶意文件的行为模式等。",description:"内容可能包括：文件哈希值： 恶意文件的唯一标识符，可用于识别已知的恶意软件。IP地址： 已知与恶意活动相关的恶意IP地址。域名： 与威胁相关的可能恶意的域名。恶意文件的行为模式： 特定的恶意软件可能具有独特的行为模式，可作为威胁指标。",limitation:"IOC妥协指标情报的局限性包括对已知攻击模式的依赖，易受攻击者变更IOC的影响，容易产生误报和漏报，以及其基于静态特征的特性，使其难以适应动态和变化的威胁环境。",references:[{title:"威胁情报基本术语",link:"https://www.jianshu.com/p/201d296636f4"}],updated:"2024-01-11"},"A0016-005":{title:"风险地址情报",category:"AC03",summary:"对用户填入的虚假或恶意的收货、通联地址进行标识",description:"这类情报系统通常结合数据分析、机器学习和人工智能技术，从大量数据源中提取模式、行为和特征，以便识别潜在的风险地址。以下是风险地址情报的一些关键方面：虚假身份和欺诈检测： 风险地址情报系统可以分析用户填写的地址信息，与其他数据点（如姓名、联系方式等）进行比对，识别是否存在虚假身份或欺诈行为。历史行为分析： 通过分析用户过去的行为模式，系统可以识别异常或不寻常的地址填写行为。例如，频繁更改地址、使用相似的虚假地址等可能被认为是风险信号。地理信息验证： 利用地理信息系统（GIS）和地理位置数据，系统可以验证用户提供的地址是否与实际地理位置相符，从而排除或标识潜在的风险。社交网络分析： 将用户的地址信息与其在社交网络上的活动和关系联系起来，有助于检测潜在的欺诈或非法活动。黑名单匹配： 风险地址情报系统可以与已知的欺诈、恶意活动相关的地址黑名单进行匹配，及时发现并防范可能的风险。",limitation:"局限性包括可能存在虚假信息逃避检测、误报率高、数据质量依赖性强、涉及隐私问题、受制于地理多样性、适应性不足于新型欺诈形式、可能影响用户体验，以及实施和维护成本较高。",references:[],updated:"2024-01-25"}},Q=Object.freeze(Object.defineProperty({__proto__:null,A0016:J,default:q},Symbol.toStringTag,{value:"Module"})),V={title:"增加身份鉴权",category:"AC01",summary:"对应用运行流程增加权限鉴别，以再次确认用户的请求意图和真实身份。",description:"增加身份鉴权可以用在如下业务环节，譬如：支付、改密、身份绑定、外部联登授权、用劵、用积分、账号注销等，可采取的形式包括：输入密码、人脸识别、指纹识别、手机验证码等",limitation:"通过输入等密码来增加身份鉴权，仅适合希望用户再次确认请求意图，或防御用户登录凭据（譬如Cookies）被盗场景。因不能够保证掌握登录密码的人就是本人，对于确认用户真实身份效果不佳，很多时候会要求用户设置除登录密码外的另外一个密码，譬如支付密码之类",references:[],updated:"2024-01-11"},W={A0017:V,"A0017-001":{title:"门禁",category:"AC01",summary:"门禁是指通过对人员身份进行鉴别，对人员进出的权限进行控制，从而达到安全管理的目的。",description:"门禁的种类或形态多种多样，根据不同的应用场景和需求，门禁系统可以设计成多种形式。常见的门禁类型包括：密码门禁：通过输入特定数字密码进行身份验证，通常与机械锁结合使用。刷卡门禁：使用磁卡、IC卡、RFID等卡片进行身份识别，常见于办公楼、住宅小区等。生物识别门禁：利用生物识别技术，如指纹识别、人脸识别、虹膜识别等，具有高安全性。移动应用门禁：通过手机APP实现远程开门，适用于智能家居、自助图书馆等场景。组合门禁：将多种身份识别方式结合使用，如指纹+密码、刷卡+生物识别等，以提高安全性。云端门禁：通过云计算技术实现远程管理和监控，常见于大型企业或公共场所。特殊门禁：如地感线圈门禁、红外感应门禁等，适用于特定环境和特殊需求。这些门禁类型各有优缺点，适用于不同的应用场景。选择合适的门禁类型需要考虑安全要求、使用便利性、成本等因素。",limitation:"非生物识别的门禁系统容易被盗用，此外未能进行精确流量控制的门禁容易被通过人员跟随的方式突破",references:[{title:"门禁系统-百度百科",link:"https://baike.baidu.com/item/%E9%97%A8%E7%A6%81?fromModule=lemma_search-box"}],updated:"2024-01-30"}},X=Object.freeze(Object.defineProperty({__proto__:null,A0017:V,default:W},Symbol.toStringTag,{value:"Module"})),Y={title:"身份认证（登录）",category:"AC01",summary:"在终端请求相关资源时，要求用户通过登录等方式确认身份信息。",description:"大部分情况下身份认证的方式是登录。在不验证登录态的情况下，要实现对终端访问行为的持续监控是很难的，因为不管是请求特征还是请求来源伪造起来均十分简单，这使得逃脱服务端对终端访问的持续监控成为了绕过对资源滥用惩罚的一种常用方法。也正因此，目前很多业务会将身份认证作为实现对终端访问行为持续性监控的有效办法，终端在不经过身份认证的情况下只能访问有限类型或有效数量的资源，若想访问更多资源，则必须进行身份认证。",limitation:"身份认证的防护效果严重依赖于业务身份的获取成本，一方面是身份的注册成本，另一方面是身份的登录认证成本，此外也跟身份处罚（A020）的严厉性息息相关。有一些网站应用可以随意批量注册用户身份，在这种情况下进行的身份认证的意义就很有限。",references:[],updated:"2024-01-11"},Z={A0018:Y,"A0018-001":{title:"零知识证明",category:"AC01",summary:"零知识证明是一种特殊的交互协议，它可以让证明者向验证者证明某个陈述为真，而不需要向验证者提供任何有关该陈述的信息。",description:"零知识证明的基本思想是，证明者通过一系列的交互，向验证者证明自己知道某个陈述的证据，但是在这个过程中，证明者不会泄露任何关于这个证据的信息。零知识证明的典型应用场景是身份认证，即证明者可以向验证者证明自己知道某个密码，但是在这个过程中，证明者不会泄露任何关于这个密码的信息。譬如电商场景，对用户身份存疑时，可以通过让用户选择购买过的商品的方式来确认用户身份；或则社交场景，对用户身份存疑时，可以通过让用户选择自己的好友的方式来确认用户身份。",limitation:"用户可能丢失对某项知识的判断，导致无法通过验证。",references:[{title:"零知识证明",link:"https://zhuanlan.zhihu.com/p/634225678"}],updated:"2024-01-16"},"A0019-002":{title:"邀请码机制",category:"AC01",summary:"邀请码机制是一种通过邀请码来限制用户注册的机制。",description:"在用户注册时，需要输入邀请码才能完成注册。邀请码可以由管理员生成，也可以由其他用户生成。邀请码机制可以有效防止恶意注册，但是需要管理员或其他用户生成邀请码，因此邀请码机制的成本较高。",limitation:"邀请码机制会增加用户注册的成本，因此不适用于用户注册量较大的场景。",references:[],updated:"2024-01-16"},"A0019-003":{title:"好友辅助认证",category:"AC01",summary:"好友辅助认证是一种通过用户的好友来辅助认证用户身份的机制。",description:"在用户注册或认证时，需要选择自己的好友，系统会向这些好友发送验证信息，用户需要通过这些好友的验证才能完成注册。",limitation:"如果没有好友，或者好友不愿意帮助验证，用户将无法完成注册。",references:[],updated:"2024-01-16"}},$=Object.freeze(Object.defineProperty({__proto__:null,A0018:Y,default:Z},Symbol.toStringTag,{value:"Module"})),ee={title:"身份安全审计",category:"AC03",summary:"对用户的账户安全进行持续性审计，以及时发现账号风险。",description:"与风控策略（A015）的风险监控机制类似，身份的行为监控和风险性判断同样是一种审计性防护手段。不过两者的防护主体和客体不同，风控的防护主体是业务，客体是用户；而身份行为审计的防护主体是用户，客体是攻击者。身份安全审计是一种常用的评估身份安全性的手段，不过在审计出异常后，需要结合身份的其他手段使用，如：再次的身份认证（A018）、多因素认证（A007）、强制改密（A012）等。",limitation:"一般来说，身份安全审计依赖于对账号的异常行为识别，这需要一定的时间和数据作为参照基础。此外，部分情况下，身份安全审计具备一定的滞后性，需要在识别到风险后进行后续的处置或止损。",references:[],updated:"2024-01-11"},te={A0019:ee},ie=Object.freeze(Object.defineProperty({__proto__:null,A0019:ee,default:te},Symbol.toStringTag,{value:"Module"})),re={title:"账号处罚",category:"AC04",summary:"在账号触碰相关规则时对账号进行处罚，并禁止相关行为或动作。",description:"身份处罚策略是限制不合法或不合规用户对业务造成持续性破坏的一种有效手段。身份处罚可以有两个层面：一是对账户本身的限制，譬如一定期限内禁用、警告公示、取消授权等；二是对账户可访问资源的限制，如禁用特殊的业务功能、限制资源使用频次、删除资源或限制非法资源访问等。",limitation:"身份处罚是一种止损策略，具备一定滞后性。",references:[],updated:"2024-01-11"},oe={A0020:re,"A0020-001":{title:"店铺处罚",category:"AC04",summary:"在店铺触碰相关规则时对店铺进行处罚，并禁止相关行为或动作。",description:"店铺处罚策略包括：降低信用评级、降低等级、商品下架、降低搜索权重、暂停店铺、封禁店铺、罚款等",limitation:"店铺处罚是一种止损策略，具备一定滞后性。",references:[],updated:"2024-01-11"},"A0020-002":{title:"员工处罚",category:"AC04",summary:"员工处罚策略是组织为了回应员工违反公司规定或政策的行为而制定的一系列制裁措施。",description:"处罚内容可能包括口头警告、书面警告、停职、降职、工资扣减、解雇等。有效的员工处罚策略应该平衡惩戒和改善，促使员工意识到错误行为的后果，同时提供机会让他们纠正和改进。",limitation:"局限性在于可能引发员工不满、影响工作氛围，且需确保合规性，防范法律诉讼，因此需要制定公正、明确、一致执行的策略，并与相关法规和公司政策相一致。",references:[{title:"公司员工的哪些行为需要进行处罚",link:"https://www.64365.com/zs/1280613.aspx"}],updated:"2024-01-11"},"A0020-003":{title:"账号封禁",category:"AC04",summary:"账号封禁策略是指在账号触碰相关规则时对账号进行封禁，禁止账号登录。",description:"账号封禁策略包括：账号封禁、账号冻结、账号注销、账号销毁等。",limitation:"账号封禁是一种止损策略，具备一定滞后性。",references:[],updated:"2024-01-19"}},ae=Object.freeze(Object.defineProperty({__proto__:null,A0020:re,default:oe},Symbol.toStringTag,{value:"Module"})),le={title:"设备指纹",category:"AC02",summary:"指可以用于唯一标识出该设备的设备特征或者独特的设备标识。",description:"设备指纹技术是一种用于识别和标识计算设备（如智能手机、平板电脑、电脑等）的方法。它利用设备本身的硬件和软件特征，创建一个独特的标识，以便在未来的访问中识别和验证该设备。设备指纹包括一些固有的、较难篡改的、唯一的设备标识。比如设备的硬件ID，像手机在生产过程中都会被赋予一个唯一的IMEI编号，用于唯一标识该台设备。像电脑的网卡，在生产过程中会被赋予唯一的MAC地址。这些设备唯一的标识符我们可以将其视为设备指纹。同时，设备的特征集合可以用来当做设备指纹。我们将设备的名称、型号、形状、颜色、功能等各个特征结合起来用于作为设备的标识。",limitation:"对于设备中的唯一标识如：IMEI、IMSI、MAC地址、AndroidID、IDFA等，由于用户隐私限制，随着系统升级，基本需要用户授权才能使用，这导致通用性是个问题，尤其对于黑灰产设备基本不会给予这类权限。而对于多设备特征进行综合计算形成的设备标识，则太容易被篡改从而导致无法召回。",references:[{title:"设备指纹 - 百度百科",link:"https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87%E6%8C%87%E7%BA%B9/20817369?fr=ge_ala"}],updated:"2024-01-11"},ne={A0021:le,"A0021-001":{title:"设备标记",category:"AC02",summary:"通过设备特征、永久Cookies等方式对终端进行标记",description:"也叫终端标记、设备打标等。设备标记通常可以通过隐蔽标记埋点、特殊设备特征采集等方式实现。设备标记一般出于两种目的：一种是为设备设置唯一标识，使得在设备标记存在的情况下，知晓设备身份；另一种是为设备设计一个特殊的标签，譬如白设备、黑设备等，使得设备在改变设备指纹后依然可以对设备的安全性进行持续性的识别和跟踪。",limitation:"由于无法保证终端数据完整性，再加上法律法规对用户隐私性要求，终端标记的制约性较强，仅在一定情况下保持有效。",references:[],updated:"2024-01-11"}},de=Object.freeze(Object.defineProperty({__proto__:null,A0021:le,default:ne},Symbol.toStringTag,{value:"Module"})),ce={title:"流量加密",category:"AC01",summary:"对网络请求流量或响应流量进行加密",description:"流量加密通常是为流程安全提供一种保护机制，通过在传输过程中对数据进行加密，使得攻击者无法直接获取到原始数据，或对数据进行直接修改。",limitation:"流量加密会增加数据传输的复杂性和成本，在使用流量加密时需要权衡其安全性和性能的影响。",references:[],updated:"2024-01-11"},ue={A0022:ce,"A0022-001":{title:"传输协议加密",category:"AC01",summary:"对整个传输层或应用层通信数据采用自定义算法加密或魔改通用加密算法。",description:"传输层加密是指在传输层对数据进行加密，以保证数据在传输过程中不被窃取或篡改，譬如魔改SSL、TLS等。应用层加密是指在应用层对数据进行加密，以保证数据在传输过程中不被窃取或篡改，譬如魔改HTTPS等。因直接对数据传输协议进行加密，所以可以忽略上层的具体业务场景，实现对应用下面的全业务场景覆盖。",limitation:"无法适用于使用浏览器进行网页访问的场景。",references:[],updated:"2024-01-11"},"A0022-002":{title:"请求数据加密",category:"AC01",summary:"对发送到服务端的请求数据进行加密",description:"请求数据加密是指在请求数据发送到服务端之前，基于现有协议（譬如HTTPS）基础上对请求体（Request body）进行加密，以保证数据在传输过程中不被窃取或篡改。请求数据加密可以应用在任何业务场景，但是需要在服务端进行解密，因此需要在服务端增加解密逻辑。",limitation:"一般通过HOOK远程请求函数来实现对数据的加密，但这可能会导致一定的兼容性问题，且如果有业务未采用统一的远程请求函数，那么这部分业务的数据就无法加密。",references:[],updated:"2024-01-11"},"A0022-003":{title:"响应数据加密",category:"AC01",summary:"对服务端的响应数据进行加密",description:"响应数据加密是指在服务端对响应数据（Response body）进行加密，以保证数据在传输过程中不被窃取或篡改。响应数据加密可以应用在任何业务场景，但是需要在客户端进行解密，因此需要在客户端增加解密逻辑。",limitation:"一般通过HOOK远程请求函数来实现对数据的加密，但这可能会导致一定的兼容性问题，且如果有业务未采用统一的远程请求函数，那么这部分业务的数据就无法加密。",references:[],updated:"2024-01-11"},"A0022-004":{title:"自定义传输协议",category:"AC01",summary:"自定义传输协议，不使用通用的传输协议",description:"自定义传输协议是指在传输层或应用层自定义传输协议，或通过修改常用协议使其不再通用，以保证数据在传输过程中不被解析或篡改。自定义传输协议可以应用在任何业务场景，但是需要在客户端和服务端都增加自定义协议的解析逻辑。",limitation:"自定义传输协议需要在客户端和服务端都增加自定义协议的解析逻辑，且需要保证客户端和服务端的协议版本一致，否则会导致通信失败。",references:[],updated:"2024-01-16"}},se=Object.freeze(Object.defineProperty({__proto__:null,A0022:ce,default:ue},Symbol.toStringTag,{value:"Module"})),me={title:"生物特征识别",category:"AC03",summary:"通过对人体的生物特征进行识别和比对，判断用户身份。",description:"人脸、指纹、声纹、虹膜、步态、掌纹、静脉纹路、DNA等都属于具备一定唯一性的人体生物特征。目前在移动设备上常用于远程比对的主要是人脸、面容、声纹等。由于人脸识别、声纹识别有着非常激烈的对抗战场，目前主要用于在基本身份认证（A018）和双因素验证（A007）外的第三验证，相比盗号防御而言，更多地是防止身份仿冒。",limitation:"误识率高：生物特征识别技术在实际应用中，由于受到环境、设备、人体生理变化等因素的影响，会导致误识率较高。易被攻击：生物特征识别技术的安全性存在一定的风险，如人脸、声纹、指纹、虹膜等生物特征可以被复制或伪造，从而导致系统被攻击。隐私泄露：生物特征识别技术需要采集用户的生物特征信息，如果这些信息被泄露，将会对用户的隐私造成威胁。",references:[],updated:"2024-01-11"},Ae={A0023:me,"A0023-001":{title:"人脸识别",category:"AC03",summary:"通过对人脸进行识别和比对，判断用户身份。",description:"人脸识别是一种生物特征识别技术，通过对人脸进行识别和比对，判断用户身份。人脸识别技术主要包括人脸检测、人脸特征提取、人脸特征比对等步骤。人脸识别技术在移动设备上的应用主要包括人脸解锁、人脸支付、人脸签到等场景。",limitation:"人脸识别技术的安全性存在一定的风险，如人脸图片可以被复制或伪造，从而导致系统被攻击。",references:[],updated:"2024-01-11"}},pe=Object.freeze(Object.defineProperty({__proto__:null,A0023:me,default:Ae},Symbol.toStringTag,{value:"Module"})),ye={title:"身份实名认证",category:"AC01",summary:"将虚拟身份与现实身份进行绑定",description:"人或实体的现实身份包括：身份证、户口簿、驾驶证、军官证、士兵证、护照、营业执照等法定证件、有效证件或身份认证，那么身份实名认证的过程即是将人或实体的网上虚拟身份与现实身份的绑定过程。这个过程中有可能会使用生物特征识别（A023）等方式来确定现实身份的有效性。",limitation:"由于个人身份证件信息泄露事件时常发生，使得不能通过输入身份证件ID、拍摄身份证件照片等方式来证明身份所有者。必须结合人脸识别、证件绑定的手机短信、银行卡归属人等其他方式来确认证件所属人",references:[],updated:"2024-01-11"},fe={A0024:ye},ge=Object.freeze(Object.defineProperty({__proto__:null,A0024:ye,default:fe},Symbol.toStringTag,{value:"Module"})),_e={title:"数字证书",category:"AC01",summary:"通过数字证书机制对数据或文件进行数字签名和加密",description:"与接口签名（A002）不同，数字证书更多强调数据或文件从发送端传递到接收端的整个传输链路的完整性，也可以作为对发送者的真实性验证机制。而接口签名更多地是保证用户端传递数据以及跨站点传递数据的完整性。简单来说，数据证书重点防御数据传输过程，而接口签名重点防御的是用户终端。",limitation:"由于数字证书的签发机构是可信的第三方，因此数字证书的安全性严重依赖于签发机构的可信性。如果签发机构被攻击，那么攻击者就可以伪造数字证书，从而导致数字证书的安全性受到影响。此外，数字证书的安全性还受到签名算法的影响。如果签名算法被攻击，那么攻击者就可以伪造数字签名，从而导致数字证书的安全性受到影响。",references:[],updated:"2024-01-11"},be={A0025:_e,"A0025-001":{title:"邮件数字证书",category:"AC01",summary:"对邮件的发件人进行可信性保证，对邮件内容进行完整性和保密性保证",description:"对电子邮件和附件进行数字签名和加密，为电子通信提供了高级别的机密性和安全性。加密意味着只有预期收件人才能够阅读邮件，而数字签名允许他们确认发件人，并验证邮件是否在途中被篡改。（摘自腾讯云）",limitation:"使用邮件数字证书的过程可能相对繁琐，用户需要了解数字证书的概念、购买证书、配置电子邮件客户端等。这可能对一般用户造成一定的使用门槛。数字证书需要及时续期，而且在证书过期之前需要进行更新。证书管理可能变得复杂，尤其是对于大规模部署的组织。为了实现端到端的加密和签名，邮件的发送方和接收方都需要支持和配置数字证书。这意味着在一些情况下，与不使用数字证书的用户通信可能受到一些限制。邮件数字证书只能在传输过程中提供安全性，但无法解决端点安全性问题，如用户密码泄露或恶意软件感染。",references:[],updated:"2024-01-11"},"A0025-002":{title:"HTTPS数字证书",category:"AC01",summary:"对HTTP请求进行可信性、完整性和保密性保证",description:"通过购买并安装HTTPS证书服务，保证用户请求服务器的可信性、完整性和保密性。",limitation:"HTTPS数字证书的安全性严重依赖于签发机构的可信性。如果签发机构被攻击，那么攻击者就可以伪造数字证书，从而导致HTTPS数字证书的安全性受到影响。此外，HTTPS数字证书的安全性还受到签名算法的影响。如果签名算法被攻击，那么攻击者就可以伪造数字签名，从而导致HTTPS数字证书的安全性受到影响。",references:[],updated:"2024-01-11"},"A0025-003":{title:"文件电子印章",category:"AC01",summary:"对文件进行可信性和完整性签名保证",description:"提供电子文件（电子合同、电子订单、电子协议等）互联网在线缔约、合同管理（历史合同、合同模板）、电子数据固证存证及实时取证等全链路管理的可信行为认证。通过保障电子数据在全生命周期内的完整、可信、不可被篡改，有效解决电子数据固证难、管理难、司法认证难的困境。（摘自jdcloud.com）",limitation:"使用文件电子印章的过程可能对一般用户来说相对复杂，需要了解数字签名和印章的概念，以及如何正确地应用和验证印章。文件电子印章的可信度和有效性依赖于底层的公共密钥基础设施的可靠性。如果PKI受到攻击或存在问题，电子印章的可信度就会受到威胁。",references:[],updated:"2024-01-11"},"A0025-004":{title:"USB Key数字证书",category:"AC01",summary:"一种USB接口的硬件设备。它内置单片机或智能卡芯片，有一定的存储空间，可以存储用户的私钥以及数字证书。",description:"将客户端登录时所需的认证信息，（如用户名，密码，QQ，邮箱，电话，身份证号等等）均可写入到usb key内，可以写入算法，也可写入代码，从而让 key取代传统的“用户名+密码”的登录方式，实现插上Key才能登录网站或应用系统的目标。同时，开发人员还可以根据需要，设置usb key与传统的“用户名密码”方式并用的登录模式。用usb key做权限控制，设定不同的客户端拥有不同的权限。如某些客户端，只能使用网站或系统的部分功能，或不同的客户端，使用不同的网站或系统模块等，同时可以设定网站或系统使用时，是否一定要一直插着usb key或拔下usb key后多久网站或系统自动退出。",limitation:"设备易于遗失或被盗，可能导致敏感信息的不当访问。依赖于登录系统的支持情况，如果系统不支持USB Key登录，那么USB Key就无法使用。",references:[{title:"USB Key - 百度百科",link:"https://baike.baidu.com/item/USB%20Key/9679194?fromtitle=ukey&fromid=8352760&fr=aladdin"}],updated:"2024-01-11"}},Pe=Object.freeze(Object.defineProperty({__proto__:null,A0025:_e,default:be},Symbol.toStringTag,{value:"Module"})),je={title:"凭据复用识别",category:"AC03",summary:"通过对凭据的使用情况进行分析，识别凭据是否被恶意复用。",description:"凭据复用识别是一种常用的恶意账号识别手段，凭据复用识别可以应用在任何业务场景，通过对终端采集的数据或数据请求特征在服务端进行分析，来判断同一访问凭据是否在多处使用。常见的识别手段包括：UA判断、IP判断、设备指纹判断等",limitation:"由于正常用户访问也会有IP漂移的问题，所以IP判断一般是地域判断。如果攻击者使用了当地的代理IP、又修改了UA和设备指纹，则很可能绕过检测。对此笔者（Monyer）曾申请过一个专利“一种基于访问分叉判断的身份冒用识别技术”用以解决此问题。",references:[],updated:"2024-01-11"},Oe={A0026:je},Ce=Object.freeze(Object.defineProperty({__proto__:null,A0026:je,default:Oe},Symbol.toStringTag,{value:"Module"})),Se={title:"客服回访确认",category:"AC03",summary:"通过客服电话回访等方式来确认用户真实性或行为合法性",description:"在某些特种的业务场景中（譬如金融场景等），系统识别用户异常行为处置过程中，可以结合客服电话回访来通知用户或鉴别用户合法性。",limitation:"由于客服回访确认的成本较高，因此一般只用于对重大业务风险的确认，而不是对所有业务风险的确认。此外，客服回访确认的有效性严重依赖于客服的专业性和客服的回访态度。",references:[],updated:"2024-01-11"},Te={A0027:Se},Ie=Object.freeze(Object.defineProperty({__proto__:null,A0027:Se,default:Te},Symbol.toStringTag,{value:"Module"})),he={title:"资源访问限制",category:"AC04",summary:"对请求者可访问资源进行限制",description:"与身份处罚策略（A020）不同的是，资源访问限制不一定是在获取用户登录身份的情况下。通过浏览器下发到终端的会话信息，访问IP信息，或者通过终端标记跟踪（A021）获取的唯一设备ID等实现对访问者的标定。并在基础上实现禁用特殊的业务功能、限制资源使用频次、删除资源或限制非法资源访问等。",limitation:"资源访问限制在非登录情况下，只能依赖IP、UA、设备ID等终端因素，但这类因素均存在伪造的可能性，导致该手段应对高端攻击者的效果有限。",references:[],updated:"2024-01-11"},Ee={A0028:he,"A0028-001":{title:"限制外站访问",category:"AC04",summary:"通过判断referer等方式限制非本站访问",description:"一般应用在图片、视频、文件等资源请求环节，限制外站访问一是可以减少对服务器的不必要消耗，另外也是防止资源滥用的一种有效方式。",limitation:"需要注意的是，Referer字段可以被伪造，因此这种技术并不是完全可靠的。此外，一些浏览器还提供了Referrer Policy选项，可以控制浏览器在发送请求时是否携带Referer字段，导致难以判断访问来源。",references:[],updated:"2024-01-11"}},Me=Object.freeze(Object.defineProperty({__proto__:null,A0028:he,default:Ee},Symbol.toStringTag,{value:"Module"})),ke={title:"数据画像",category:"AC03",summary:"通过收集并分析各种数据，来形成对此类数据的标签化",description:"数据画像是指根据数据属性、数据行为等信息抽象出来的带有标签的数据模型。",limitation:"数据质量问题：数据画像技术需要大量的数据支持，如果数据质量不高，就会影响画像的准确性。数据隐私问题：数据画像技术需要收集大量的数据，如果处理不当，就会涉及到数据隐私问题。时效性问题：数据画像技术是基于历史数据进行分析和预测的，如果数据过时或者不准确，就会影响画像的时效性。",references:[],updated:"2024-01-16"},ze={A0029:ke,"A0029-001":{title:"用户画像",category:"AC03",summary:"将用户标签化，通过各种标签来描述用户",description:"用户画像是指根据用户属性、用户偏好、生活习惯、用户行为等信息抽象出来的带有标签的用户模型。 通俗的讲就是给用户贴标签，标签是通过分析用户信息得到的高度精细化的特征标识。 通过标注，可以用一些高度概括、易于理解的特征来描述用户，这样可以使人们更容易理解用户，便于计算机处理。",limitation:"数据质量问题：用户画像技术需要大量的数据支持，如果数据质量不高，就会影响画像的准确性。数据隐私问题：用户画像技术需要收集大量的用户数据，如果处理不当，就会涉及到用户隐私问题。时效性问题：用户画像技术是基于历史数据进行分析和预测的，如果数据过时或者不准确，就会影响画像的时效性。",references:[],updated:"2024-01-11"},"A0029-002":{title:"IP画像",category:"AC03",summary:"IP画像是指通过分析IP地址的行为和特征，将该IP地址与各种标签和属性进行关联，从而形成对该IP地址的综合认知。",description:"IP画像可以包括该IP地址的地理位置、所属运营商、网络质量、用户画像等多个方面，可以用于判断该IP地址是否存在风险、是否为恶意IP等。在网络安全领域，IP画像是一项重要的技术手段，可以帮助企业更好地了解网络中的威胁和异常行为，提高网络安全防护能力。通过IP画像，企业可以快速定位和处置恶意攻击、欺诈行为等网络安全事件，保障企业的业务安全和数据安全。",limitation:"随着IPV6的普及，IP地址的数量将大幅增加，IP画像技术也将面临更大的挑战。",references:[],updated:"2024-01-19"},"A0029-003":{title:"设备画像",category:"AC03",summary:"将设备标签化，通过各种标签来描述设备",description:"设备画像是指根据设备属性、设备行为等信息抽象出来的带有标签的设备模型。 ",limitation:"设备画像是设备指纹（A0021）的延伸，如果设备指纹不准确，设备画像也会受到影响。此外，设备画像的准确性还受到设备画像算法的影响。",references:[],updated:"2024-01-16"}},De=Object.freeze(Object.defineProperty({__proto__:null,A0029:ke,default:ze},Symbol.toStringTag,{value:"Module"})),ve={title:"业务级蜜罐",category:"AC02",summary:"一种专门搭建给攻击者而不是正常用户的虚假业务资源系统",description:"这种资源系统应保证在正常的业务访问或请求过程中不会被正常用户访问，但攻击者通过资源ID枚举、逆向、抓包、破解等方式可以发现并进行利用访问的资源。这样凡是访问虚假业务资源系统就都是攻击者，一是第一时间告警业务有资源被攻击者看中并攻击了，二是可以对攻击者的身份、特征、行为进行持续性跟踪，以方面进行规避手段升级或进行相关处置。",limitation:"对于完全模拟正常用户访问的攻击行为无能为力",references:[],updated:"2024-01-11"},Be={A0030:ve},Re=Object.freeze(Object.defineProperty({__proto__:null,A0030:ve,default:Be},Symbol.toStringTag,{value:"Module"})),He={title:"返回虚假数据(投毒)",category:"AC04",summary:"对已识别的攻击者返回不准确或虚假数据",description:"也叫“数据投毒”。返回虚假数据通常针对价格、评论数、销量、库存等数据的爬取。因价格数据广泛被比价网站或竞对企业不正当竞争使用，此时返回虚假数据将导致此类企图失效。而评论数、销量等与价格相结合则有可能推断出企业的GMV，判断出企业经营情况，从而被用于恶意操纵股市或做空等情况，返回虚假数据将使此类计算不准确。",limitation:"返回虚假数据要保证在识别恶意请求的准确率为100%的前提下使用。因为虚假数据一旦被正常用户访问到，给正常用户造成干扰是小事，非常有可能被用户取证，作为平台伪造数据，不遵守依法合规从事经营活动的证据。较小的影响是造成社会舆论影响，较大的影响有可能会导致合规问题。",references:[],updated:"2024-01-11"},we={A0031:He},Ke=Object.freeze(Object.defineProperty({__proto__:null,A0031:He,default:we},Symbol.toStringTag,{value:"Module"})),Le={title:"数据解析干扰",category:"AC01",summary:"增加程序解析或理解所获数据内容的难度",description:"常见的数据解析干扰手段包含：文本混淆、响应数据加密（A022-003）、页面动态渲染、JS混淆、返回假数据（A031）等。文本混淆又包含CSS偏移、图片伪装文本、自定义字体等。这些手段并不直接识别或拦截攻击者对数据的请求过程，而是通过增加程序对数据资源的理解难度来提升对抗级别。",limitation:"任何展现在终端的资源不管采取再复杂的对抗手段，均有被逆向和破解的可能性。此外有一种非常简单暴力的方法可以绕过大部分数据解析干扰，那就是模拟用户请求，访问资源所在页面，将页面截图再用OCR识别资源内容，可以轻易绕过上面提到的手段。",references:[{title:"爬虫与反爬虫技术简介(请参见第二章节-反爬虫相关技术)",link:"https://mp.weixin.qq.com/s/dJhCQmpejY-GTE_a1ZpPsg"}],updated:"2024-01-11"},xe={A0032:Le},Fe=Object.freeze(Object.defineProperty({__proto__:null,A0032:Le,default:xe},Symbol.toStringTag,{value:"Module"})),Ue={title:"单设备登录",category:"AC01",summary:"一个账号仅允许在同类设备上登录一次",description:"同类设备指：浏览器、手机APP、平板电脑、小程序等。一个账号只允许登录一个浏览器、手机APP、平板电脑、小程序实例，当第二个同类设备要登录时，就会把前一个已登录的对应设备实例登出。从而避免了一个账号被多台同类设备登录获得众多实例的情况",limitation:"单设备登录的识别机制通常是在服务端记录账号在同类设备登录的次数，当大于1次时就初始化掉之前的实例，或将之前实例登出。但这种机制存在一个问题：就是如果是凭据复用（R0035），也就是CK(Cookies)登录（AT0030）的情况下，因为前一设备和新的设备都使用的是同一登录实例，从而可以突破限制实现多点登录。此时需要增加凭据复用识别机制",references:[{title:"单设备登录",link:"https://blog.csdn.net/ls0111/article/details/79062857"}],updated:"2024-01-11"},Ge={A0033:Ue},Ne=Object.freeze(Object.defineProperty({__proto__:null,A0033:Ue,default:Ge},Symbol.toStringTag,{value:"Module"})),Je={title:"数据模糊化",category:"A0034",summary:"数据模糊化是一种隐私保护技术，通过对敏感数据进行变形、扰动或替换，以减轻数据泄露的风险，同时保持数据的一定可用性。其目标是在数据处理和共享过程中降低敏感信息的识别风险。",description:"手段方法： 数据模糊化采用多种手段和方法，其中包括：替换和置换： 将原始数据的某些值替换为模糊或虚构的值，如将真实姓名替换为随机生成的名字。扰动： 在数据中引入噪音或扰动，使得原始数据的具体值难以被准确还原，例如在数值数据中添加随机数。泛化： 通过将数据进行泛化，将具体的细节降低为更一般化的形式，以保护隐私，例如将具体的地址泛化为城市级别。脱敏： 对数据进行脱敏处理，去除或替换其中的敏感信息，以保护隐私。数据掩码： 使用掩码技术隐藏部分数据，只展示一部分信息，以限制对敏感信息的访问。",limitation:"数据模糊化虽然在隐私保护方面发挥了重要作用，但其使用也存在一些局限性。首先，模糊化可能引起信息损失，使得原始数据的精确性和细节信息受到影响，从而影响数据的分析和挖掘效果。其次，一些复杂的模糊化技术可能带来显著的性能开销，增加数据处理的计算和存储成本。此外，过度的数据模糊化可能导致数据的可用性问题，使得数据对用户或分析者的实际应用降低。最后，虽然旨在保护隐私，但部分模糊化技术仍可能受到攻击，导致数据被还原或敏感信息被推断，进一步增加了使用数据模糊化时需要谨慎权衡的因素。",references:[],updated:"2024-01-16"},qe={A0034:Je,"A0034-001":{title:"数值模糊化",category:"AC01",summary:"将精确的数值进行一定的模糊和概算，使之与精确数值产生较大差异",description:"数值模糊化的目的是为了防止攻击者通过数据分析、数据挖掘等手段来获取精确的数值。譬如很多三方机构会通过爬取商品精确销量和价格的方式来估算企业的全年营收和利润，进而在证券交易或企业并购等场景中掌握先发优势。数值模糊化的手段包括：四舍五入、取整、取余、加减乘除、随机数等。数值模糊化的应用场景包括：价格、库存、销量、评分、评论数等。",limitation:"数值模糊化的目标是希望数据访问者在无法看到精确数值的前提下，能看到数据的大概趋势，但又能防御三方机构掌握自身经营态势。这种目标本身就是矛盾的，因为即便不掌握精确数据，也能根据数据的大概趋势估算出最终的经营态势。所以这种防御方案仅适合阻止三方机构掌握自身精确经营数据的场景。",references:[],updated:"2024-01-11"},"A0034-002":{title:"数值指数化",category:"AC01",summary:"将精确的数值进行指数化，使之与精确数值产生较大差异",description:"数值指数化是指通过一定算法将线性的数值采取非线性表达。数值指数化的目标是希望数据访问者在无法看到精确数值的前提下，能看到数据的大概趋势，但又能防御三方机构掌握自身经营态势。数值指数化的手段包括：指数化、对数化、平方、开方、立方、开立方等。",limitation:"在掌握一定真实数值的前提下，通过对比生成的对应指数，是有可能还原指数化算法的。所以在指数化时，要么完全隐藏真实数值，使之不能够反推算法。要么通过一定阶梯算法将指数变成阶梯式曲线，每段阶梯的曲线算法均不一致，使得反推算法变得更困难。",references:[],updated:"2024-01-11"},"A0034-003":{title:"响应状态模糊化",category:"AC01",summary:"将精确的响应状态进行模糊化，使之无法区分确切的某种状态",description:"譬如很多登录系统在用户登录失败时，会提示用户用户名或密码错误，这样攻击者就可以判断一个用户在平台是否存在。将响应状态模糊化后，不管是用户不存在、还是密码错误，均提示“用户名或密码错误”，从而攻击者不再能够推断究竟是用户不存在还是密码错误。",limitation:"响应状态模糊化是一种比较初级的规避手段，非常值得一试，但不是银弹",references:[],updated:"2024-01-16"}},Qe=Object.freeze(Object.defineProperty({__proto__:null,A0034:Je,default:qe},Symbol.toStringTag,{value:"Module"})),Ve={title:"数据脱敏（脱密）",category:"AC01",summary:"将数据中的敏感信息去除或用特殊符号替换",description:"数据脱敏是一种技术措施，用于保护敏感数据的安全性和隐私性。数据脱敏的基本原理是通过脱敏算法将敏感数据进行遮蔽、变形，将敏感级别降低后对外发放，或供访问使用。数据脱敏的方法包括静态数据脱敏和动态数据脱敏。静态数据脱敏是指对数据进行一次性处理，将原始数据中的敏感字段进行处理，从而降低数据敏感度和减少个人隐私风险。动态数据脱敏则是在数据使用过程中对数据进行实时处理，以保护隐私信息。数据脱敏的意义和价值在于保护个人隐私和信息安全。在大数据时代，隐私泄露已经成为了一个严重的问题。通过对敏感信息进行脱敏处理，可以有效地降低个人隐私泄露的风险，保护个人隐私和信息安全。",limitation:"数据脱敏技术可能存在如下局限性：一是由于脱敏技术对敏感数据的保护性不足，恶意攻击者可以结合相关背景信息，推导出敏感数据，引发隐私泄露的风险；二是现有脱敏技术通常会改变原始数据的数据结构，在一定程度上影响了数据准确性。",references:[],updated:"2024-01-11"},We={A0035:Ve,"A0035-001":{title:"敏感数据去除",category:"AC01",summary:"将数据中的敏感信息去除",description:"与数据脱敏（脱密）（A035）不同，敏感数据去除是指将数据中的敏感信息去除，而不是用特殊符号替换。敏感数据去除的基本原理是通过去除算法将敏感数据进行遮蔽、变形，将敏感级别降低后对外发放，或供访问使用。敏感数据去除的方法包括静态数据去除和动态数据去除。",limitation:"敏感数据去除技术依赖于数据分类分级的执行，以及对敏感数据的识别能力。如果数据分类分级不准确，或者对敏感数据的识别能力不足，就会导致敏感数据去除的效果不佳。此外，静态的敏感数据去除技术可能会影响数据的完整性、可用性和准确性。",references:[],updated:"2024-01-11"},"A0035-002":{title:"用户信息令牌化",category:"AC01",summary:"将用户的敏感信息转化为令牌（token）",description:"用户信息令牌化是一种隐私保护和安全性增强的做法。令牌是一个代表特定信息或权限的字符串，而不直接包含敏感数据。这种方式有助于降低在处理用户数据时的风险，尤其是在网络通信和存储方面。",limitation:"令牌化并不适用于所有场景。在某些应用程序中，需要直接访问用户的原始数据，而不是通过令牌来处理。",references:[{title:"令牌化 - 百度百科",link:"https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E5%8C%96/22416521?fr=ge_ala"}],updated:"2024-01-11"},"A0035-003":{title:"虚拟手机号",category:"AC01",summary:"在订运单环节，将用户的真实手机号替换为虚拟手机号",description:"虚拟手机号使得交易的另外一方可以在不知道对方真实手机号的情况下，通过虚拟手机号与对方进行沟通。虚拟手机号的应用场景包括：交易、配送、客服、投诉、售后等。",limitation:"因虚拟号的客观数量限制，需要通过令牌将多个用户手机号影射到一个虚拟号上，这增加了拨号成本。虚拟号对于短信的收发较为不友好，譬如快递柜不支持虚拟号导致消费者收不到取件码等。",references:[{title:"虚拟号，究竟保护了谁？",link:"https://baijiahao.baidu.com/s?id=1786971537647885809&wfr=spider&for=pc"}],updated:"2024-01-11"}},Xe=Object.freeze(Object.defineProperty({__proto__:null,A0035:Ve,default:We},Symbol.toStringTag,{value:"Module"})),Ye={title:"资源ID加密",category:"AC01",summary:"将资源ID加密，使得攻击者无法直接枚举出所有资源ID",description:"通过编码技术对资源ID进行处理，使得攻击者不能够通过递增或随机枚举资源ID的方式来对资源进行访问。常见的编码方式包括：随机字符化、加密、哈希等。",limitation:"在选择编码算法时，要注意该算法不能被猜测出来，譬如使用时间戳作为ID、使用可猜测的哈希算法生成ID、使用可暴力枚举的算法生成ID等。一旦算法可猜测，则编码这种规避手段就失去意义。此外，加密和哈希算法还要防止内鬼外泄和被盗取风险，因为一旦泄露，则防护措施永久性时效。所以要么保证算法的机密性，要么采取随机字符化是更好的办法。",references:[],updated:"2024-01-11"},Ze={A0036:Ye},$e=Object.freeze(Object.defineProperty({__proto__:null,A0036:Ye,default:Ze},Symbol.toStringTag,{value:"Module"})),et={title:"访问来源跟踪",category:"AC02",summary:"对资源的访问来源进行跟踪，确定来源的可靠性和合理性",description:"常见的来源跟踪是通过判断资源请求头中的referer，不过现在有一些更高明的方式：一是在站内资源访问的前置页面生成带有时间性、随机性、唯一性的加密访问令牌的资源链接来跟踪资源的访问；二是在资源被站外分享时，将分享者身份信息以访问令牌的方式生成到分享链接中。这样不管是站内的资源访问还是站外的资源访问，均可进行来源跟踪，继而可以实现对非正常来源的识别和阻断。",limitation:"两种可预见的可突破场景是：1.针对站内，可以通过批量构造资源访问前置页面的方式来获取资源站内访问令牌；2.针对站外，在广告、推广等大流量场景下，较难通过量级来判断是否是违规的令牌获取。针对1突破场景，可以通过将前置页面纳入到跟踪覆盖范围内，或加强前置页面中资源的随机性来防止针对定向资源的访问；针对2突破场景，可以通过将站外的资源访问ID进行编码等方式来解除对定向的站内资源访问。",references:[],updated:"2024-01-11"},tt={A0037:et},it=Object.freeze(Object.defineProperty({__proto__:null,A0037:et,default:tt},Symbol.toStringTag,{value:"Module"})),rt={title:"代理识别",category:"AC03",summary:"感知用户请求网络资源时的代理使用情况",description:"代理识别主要是通过分析用户请求的数据特征等，识别判断用户的网络代理和终端代理使用情况，进一步确认是否为真实的用户请求。",limitation:"代理识别的最大问题是正常用户也可能使用代理，容易误拦截。",references:[],updated:"2024-01-11"},ot={A0038:rt,"A0038-001":{title:"网页访问代理识别",category:"AC03",summary:"对用户请求资源时的访问代理进行识别（典型的访问代理是网页浏览器）",description:"黑灰产可能会使用非常规用户使用的网页访问代理来请求资源，譬如：使用无头浏览器、使用CURL、WGET等软件、使用各种编程语言自带的HTTP Lib库等。可以通过：判断User-Agent、JS判断运行环境、计算ja3、http2指纹等方式来进行网页访问代理的识别。",limitation:"因为对网页访问代理识别的方法最终还是要依赖于对终端请求信息的判断，这意味着将此手段放在强对抗环节将很容易通过伪造和修改数据的方式进行破解。",references:[{title:"网页浏览器",link:"https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911?fr=ge_ala"}],updated:"2024-01-11"},"A0038-002":{title:"网络代理识别",category:"AC03",summary:"对用户请求资源时是否进行了网络代理进行识别",description:"常见的网络代理方式有：VPN、SOCKS5、HTTP代理等。目前常见的网络代理识别方法有：IP情报、请求IP聚类、IP属性判断、TCP/IP指纹判断、DNS Server归属地差异、利用WebRTC等暴露真实IP的特征、利用代理的网络延时特性等方法，来判断是否有网络代理被使用。",limitation:"代理识别技术存在以下局限性：一是正常用户也可能使用网络代理，容易误拦截；二是使用移动运营商出口IP作为代理，导致即便识别也很难封禁；三是使用ADSL拨号网络作为代理，一旦封禁就立即通过重新拨号的方式来切换新代理",references:[],updated:"2024-01-11"}},at=Object.freeze(Object.defineProperty({__proto__:null,A0038:rt,default:ot},Symbol.toStringTag,{value:"Module"})),lt={title:"数据隐藏",category:"AC01",summary:"将终端安全能力需要用到的数据隐藏起来，增加攻击者发现和获取数据的难度",description:"与响应数据加密（A022-003）不同，数据隐藏的目标在于使得攻击者感知不到数据本身的存在，或知道存在但找不到在什么地方。一些典型的数据隐藏技术包括：加密算法白盒化，目标是在加密密钥嵌入应用程序的情况下，仍然能够保持加密算法的安全性；隐写术，将信息以某种算法隐藏在其他媒体中，例如将文本隐藏在图像中；虚拟化技术，将信息编译成特定的字节码在自建的字节码编译器中执行等数据隐藏技术等。",limitation:"数据隐藏的核心对抗点是因信息不对称导致的逆向门槛及时间成本。一旦隐藏方法被发现，那么破解只是时间问题。所以数据隐藏通常会采取动态算法或“躲猫猫”的机制：动态算法通过在算法被逆向出来之前，颁布新算法，作废旧算法的方式来加强防护；“躲猫猫”则通过在隐藏数据被找到之前，从原位置更换到新位置来实现加强防护。",references:[],updated:"2024-01-11"},nt={A0039:lt},dt=Object.freeze(Object.defineProperty({__proto__:null,A0039:lt,default:nt},Symbol.toStringTag,{value:"Module"})),ct={title:"证书锁定(SSL Pinning)",category:"AC01",summary:"在终端中固定服务器的SSL证书",description:"也称SSL Pinning。证书锁定是一种保护措施，通过在终端中固定服务器的SSL证书，使得攻击者无法通过中间人的方式获取和修改网络流量。",limitation:"证书锁定是一种较为初级的安全防御机制，旨在提升中间人门槛。但高明的攻击者会通过各种方法技巧将终端中固定的SSL证书替换成自定义证书以绕过此防御机制。",references:[{title:"证书锁定SSL Pinning简介及用途",link:"https://zhuanlan.zhihu.com/p/58204817"}],updated:"2024-01-11"},ut={A0040:ct},st=Object.freeze(Object.defineProperty({__proto__:null,A0040:ct,default:ut},Symbol.toStringTag,{value:"Module"})),mt={title:"准入控制",category:"AC01",summary:"准入控制是一种安全管理策略，旨在确保只有经过授权和身份验证的个体或实体才能够进入、连接、或使用系统、网络、应用程序或资源。这种控制的目的是限制对敏感信息和关键系统的访问，以降低潜在的威胁和风险。",description:"准入控制涵盖了多个方面，其中包括：身份验证： 确认用户或设备的身份，以确保其声称的身份是合法和准确的。授权： 给予经过身份验证的个体或实体特定的权限，以执行特定的操作或访问特定的资源。访问级别控制： 确定用户或设备能够访问的资源、区域或功能，并对其进行相应的权限设置。合规性检查： 确保用户或设备满足组织或系统规定的合规性标准和政策。设备健康检查： 检查连接到网络的设备是否符合预定的安全标准，包括是否有最新的安全补丁、是否具备防病毒软件等。",limitation:"准入控制侧重于对身份验证和访问权限的静态管理，难以适应动态变化的环境和威胁。其次，对于内部威胁或已通过身份验证的用户可能的恶意行为，准入控制相对较难检测和应对。此外，维护复杂的准入策略和规则可能增加管理和操作的复杂性，导致误判或过度的限制。最后，对于移动设备、远程工作等现代工作环境的挑战，传统准入控制可能不够灵活和适应。因此，组织在实施准入控制时需要综合考虑这些局限性，并结合其他安全策略和技术，以提高整体安全性。",references:[{title:"准入控制 - 百度百科",link:"https://baike.baidu.com/item/%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6?fromModule=lemma_search-box"}],updated:"2024-01-29"},At={A0041:mt},pt=Object.freeze(Object.defineProperty({__proto__:null,A0041:mt,default:At},Symbol.toStringTag,{value:"Module"})),yt={title:"功能随机化",category:"AC01",summary:"对业务功能进行随机化，使得攻击者无法通过固定的流程来完成自动化操作",description:"攻击者一般通过定位功能点和复现业务流程来完成自动化操作，通过对功能点的定位属性进行随机化，或对业务流程进行一些随机化事件的插入，以使得攻击者的固定自动化流程失效",limitation:"功能随机化对业务的侵入性较大，需要较强的安全与业务配合来实现，且因功能的变化，可能会导致用户体验的下降",references:[],updated:"2024-01-11"},ft={A0042:yt,"A0042-001":{title:"随机化DOM",category:"AC01",summary:"对DOM结构进行随机化，使得攻击者无法通过DOM结构来定位和操作页面元素",description:"通过对DOM结构及属性，譬如：DOM树、元素ID和Class等进行随机化，使得攻击者无法通过XPATH、ID、Class等来定位和操作页面元素。",limitation:"DOM随机化对于采用OCR方式识别和操纵页面元素的攻击方式无效",references:[],updated:"2024-01-11"},"A0042-002":{title:"随机事件流程",category:"AC01",summary:"在正常的业务流程中插入一些随机事件，使得攻击者无法通过固定的流程来完成自动化操作",description:"一般随机事件流程针对有一定的前后固定步骤的业务场景，譬如在正常的步骤中间插入随机的验证码、随机的问题、随机的广告弹窗、随机的红包弹窗等等方式，来阻断和干扰正常的业务流程，使得攻击者提前录制好的自动化时效",limitation:"攻击者可以通过不断枚举随机事件、对自动化流程异常进行告警等方式来绕过此类防御",references:[],updated:"2024-01-11"}},gt=Object.freeze(Object.defineProperty({__proto__:null,A0042:yt,default:ft},Symbol.toStringTag,{value:"Module"})),_t={title:"合同条款限制",category:"AC01",summary:"在合同条款中增加一些可以限定风险产生合规性，降低风险发生概率性的条款",description:"譬如进行违约责任、违约处罚、违约赔偿等设定。",limitation:"修改合同条款的前提是合同签订双方均为合法主体，且合同条款的修改必须符合法律法规的规定。目标是为了限定攻击者的合法行为，而不是为了阻止攻击者的恶意行为。",references:[],updated:"2024-01-11"},bt={A0043:_t},Pt=Object.freeze(Object.defineProperty({__proto__:null,A0043:_t,default:bt},Symbol.toStringTag,{value:"Module"})),jt={title:"依法打击",category:"AC04",summary:"通过法律手段对攻击者进行打击",description:"依法打击一方面是一种有效的阻止危害持续发生的有效手段；二是可以通过公布打击结果对此类行为形成震慑。目前与网络犯罪相关的刑事法条有：第285条“侵入控制计算机信息系统”、第286条“破坏计算机信息系统”、第287条“帮助信息网络犯罪”、第253条“侵犯公民个人信息”、第219条“侵犯商业秘密”等，此外还有第255条“非法经营罪”、第217条“侵犯著作权罪”等虽然不是网络犯罪相关刑事法条，但经常被用在网络犯罪的定罪中。",limitation:"依法打击的前提是：1、有可以参照法条的违法犯罪事实；2、能定位和抓捕到攻击者；3、能固定犯罪证据和犯罪数额。譬如爬虫是目前常见且企业深恶痛绝的违规行为，但法条中并没有针对爬虫的定罪依据，爬虫只有涉及到：破解了什么系统（285）、导致了什么系统不能正常运行（286）、获取了多少用户个人信息（253）、为谁提供了收费的爬虫服务（255）等，且能非常准确地确定犯罪数额，区分非犯罪数额，并能够在境内定位和抓捕到犯罪嫌疑人，才算是有依法打击的条件。",references:[],updated:"2024-01-11"},Ot={A0044:jt},Ct=Object.freeze(Object.defineProperty({__proto__:null,A0044:jt,default:Ot},Symbol.toStringTag,{value:"Module"})),St={title:"隐私计算",category:"AC01",summary:"指在保护数据本身不对外泄露的前提下实现数据分析计算的技术集合，达到对数据“可用、不可见”的目的",description:"隐私计算采用多种方式保护用户数据隐私，其中包括同态加密、安全多方计算、差分隐私、零知识证明、可搜索加密、全同态加密以及区块链和智能合约等方法。同态加密允许在加密状态下进行计算，安全多方计算确保多方合作计算中的隐私保护，差分隐私通过引入噪音来防止个体数据的推断，而零知识证明允许验证某个陈述的真实性而无需透露其他信息。可搜索加密允许在加密数据中进行搜索，全同态加密提供更高灵活性的同态计算，而区块链和智能合约则为去中心化隐私保护提供可能。这些方法可根据不同应用需求组合使用，以满足多样化的隐私保护要求。",limitation:"隐私计算的局限性包括性能开销、精度降低、通信开销、复杂性、安全性依赖、合规性问题和选择性泄露，需要在保护隐私和维持其他方面平衡的考虑下谨慎应用。",references:[{title:"隐私计算 - 百度百科",link:"https://baike.baidu.com/item/%E9%9A%90%E7%A7%81%E8%AE%A1%E7%AE%97/58575539"}],updated:"2024-01-11"},Tt={A0045:St},It=Object.freeze(Object.defineProperty({__proto__:null,A0045:St,default:Tt},Symbol.toStringTag,{value:"Module"})),ht={title:"信用等级限制",category:"AC04",summary:"对用户进行信用评级，根据信用等级对用户进行不同的限制",description:"信用分级是指根据用户的信用等级对用户进行不同的限制，譬如：信用等级高的用户可以享受更多的权益，信用等级低的用户则享受较少的权益。信用分级的目的是为了防止用户恶意行为，提升用户的信用等级，从而享受更多的权益。信用分级的方法包括：基于用户行为的信用分级、基于用户属性的信用分级、基于用户关系的信用分级、基于用户评价的信用分级等。",limitation:"信用分析依赖平台对用户的行为、属性、关系、评价等信息的收集和分析，所以无法识别新的高质量用户，会在一定程度上降低新的高质量用户的积极性。",references:[],updated:"2024-01-11"},Et={A0046:ht},Mt=Object.freeze(Object.defineProperty({__proto__:null,A0046:ht,default:Et},Symbol.toStringTag,{value:"Module"})),kt={title:"保证金机制",category:"AC01",summary:"也称押金，是指用户在使用平台服务时，需要缴纳一定的保证金，在违约时将会被扣除",description:"押金，实务中也称保证金，风险抵押金等。是指当事人双方约定，债务人或第三人向债权人给付一定的金额作为其履行债务的担保，债务履行时，返还押金或予抵扣；债务不履行时，债权人得就该款项优先受偿。给付押金的人，称出押人，一般就是债务人或第三人。受领押金的人，称受押人，他是债权人。",limitation:"保证金的金额太大会影响用户的积极性，太小会影响保证金的威慑作用，需要进行取舍权衡",references:[{title:"押金 - 百度百科",link:"https://baike.baidu.com/item/%E6%8A%BC%E9%87%91/0?fromModule=lemma_inlink"}],updated:"2024-01-11"},zt={A0047:kt},Dt=Object.freeze(Object.defineProperty({__proto__:null,A0047:kt,default:zt},Symbol.toStringTag,{value:"Module"})),vt={title:"投诉举报渠道",category:"AC03",summary:"为用户提供用于提交投诉、举报或反馈问题的渠道或方式。",description:"这样的渠道通常旨在帮助用户解决在使用服务或购买商品过程中遇到的问题，同时也有助于维护社会秩序、规范行业行为。",limitation:"违规行为的获取取决于用户的举报，且用户的举报可能存在不准确问题",references:[{title:"投诉 - 百度百科",link:"https://baike.baidu.com/item/%E6%8A%95%E8%AF%89/1902209?fromModule=disambiguation"}],updated:"2024-01-11"},Bt={A0048:vt},Rt=Object.freeze(Object.defineProperty({__proto__:null,A0048:vt,default:Bt},Symbol.toStringTag,{value:"Module"})),Ht={title:"数字水印",category:"AC03",summary:"指将特定的信息嵌入数字信号中，数字信号可能是文字、音频、文件、图片或是视频等",description:"又称数位水印。若要拷贝有数位水印的信号，所嵌入的信息也会一并被拷贝。数位水印可分为浮现式和隐藏式两种，前者是可被看见的水印（visible watermarking），其所包含的信息可在观看图片或视频时同时被看见。隐藏式的水印是以数字数据的方式加入音频、图片或视频中，但在一般的状况下无法被看见。一般来说浮现式水印主要用于震慑性和版权声明；隐藏式水印主要用于溯源和版权认定。",limitation:"水印可能会随着数字信号的编辑而消失或无法还原，譬如：图片的裁剪、视频的剪辑、音频的剪辑等。",references:[{title:"数位水印 - 百度百科",link:"https://baike.baidu.com/item/%E6%95%B0%E4%BD%8D%E6%B0%B4%E5%8D%B0/22722684?fromtitle=%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0&fromid=722667&fr=aladdin"}],updated:"2024-01-11"},wt={A0049:Ht,"A0049-001":{title:"文本水印",category:"AC03",summary:"通过在文本内容中添加不可见或难以察觉的信息，以验证文档的真实性、保护知识产权或进行数字版权管理",description:"文本水印可以是可见的，譬如将相关数字、字母、符号等替换成同形异义字等；也可以是不可见的，譬如在文本中插入不可见字符：譬如Unicode控制字符等。",limitation:"文本水印技术的局限性包括可见性问题、易被删除、不适用于所有类型的文本、隐蔽性需求、无法阻止复制、不适用于加密文本、难以适应大规模应用以及法律和隐私问题。",references:[{title:"JD.Army 开源文本水印解决方案",link:"https://textwatermark.jd.army/"}],updated:"2024-01-11"}},Kt=Object.freeze(Object.defineProperty({__proto__:null,A0049:Ht,default:wt},Symbol.toStringTag,{value:"Module"})),Lt={title:"数据泄露保护",category:"AC01",summary:"也称DLP（Data Loss Prevention），是指通过对数据的分类、标记、监控、阻断等手段，保护数据不被泄露的技术集合。",description:"通过内容检测、策略规则、实时监控和加密等功能，DLP系统能够深度扫描数据，识别特定模式或关键词，监控实时数据流以快速应对潜在的泄露风险，并采用加密技术保护数据的安全。此外，DLP系统还可在终端设备上实施防护措施、监控网络流量和通信渠道，生成详细的报告和审计日志，同时通过用户教育和培训增强员工对敏感信息保护的意识。",limitation:"DLP系统的局限性包括误报、内容识别挑战、终端设备限制、不可控的终端设备、内部威胁、实时性延迟、复杂性以及引入成本，需要组织在部署时综合考虑和管理。",references:[{title:"数据泄露保护 - 百度百科",link:"https://baike.baidu.com/item/DLP%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E9%98%B2%E6%8A%A4%E7%B3%BB%E7%BB%9F/10522315?fr=ge_ala"}],updated:"2024-01-11"},xt={A0050:Lt,"A0050-001":{title:"数据存储加密",category:"AC01",summary:"数据存储加密是指对数据进行加密，以保证数据在存储介质上的安全。",description:"数据存储加密可以分为两种：一种是对数据进行加密后再存储，另一种是对存储介质进行加密。前者的优点是可以对数据进行更细粒度的控制，但是需要在存储介质上存储密钥，密钥的安全性需要保证；后者的优点是不需要在存储介质上存储密钥，但是对数据的控制粒度较粗。",limitation:"密钥管理： 加密的安全性依赖于密钥的安全管理。如果密钥管理不善，密钥可能会被泄露或遗失，导致数据无法解密或被未经授权的人访问。性能影响： 加密和解密过程可能会引起一定的性能损耗。对于大规模的数据存储和频繁的数据访问，加密可能会导致一定的延迟。",references:[],updated:"2024-01-25"},"A0050-002":{title:"数据库审计",category:"AC01",summary:"数据库审计是指对数据库的操作进行记录和审计，以保证数据库的安全。",description:"数据库审计是通过监控和记录数据库系统的活动来确保数据库安全性、合规性和可追溯性的过程。它涵盖了访问控制审计、变更审计、敏感数据审计、异常活动检测、审计日志管理、合规性审计等关键方面。通过审计，组织能够识别潜在的安全问题，保护敏感数据，满足法规合规性要求，并提供对数据库使用情况的深入洞察，以便及时采取措施改进安全策略。数据库管理员和安全专业人员通常借助专用的审计工具来简化和自动化这一过程。",limitation:"主要包括性能开销、日志管理难题、隐私和合规性问题、误报和漏报、复杂性与配置管理挑战、保密性问题以及技术限制。",references:[{title:"数据库审计 - 百度百科",link:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A1%E8%AE%A1?fromModule=lemma_search-box"}],updated:"2024-01-25"},"A0050-003":{title:"数据擦除",category:"AC01",summary:"数据擦除是指对数据进行擦除，以保证数据不被恢复。",description:"数据擦除是指将存储设备上的数据完全删除或覆盖，以确保其无法被恢复或访问。这是一种常见的数据管理和信息安全措施，通常在设备不再使用、需要重新分配、回收、出售或丢弃之前执行。数据擦除的主要目的是保护敏感信息不被未经授权的人获取。简单的删除文件或格式化存储设备并不总能确保数据的完全擦除，因为这些操作通常只是将文件系统标记为空闲，而实际数据仍然存在。因此，更安全的方法是使用专门的数据擦除工具或软件，以覆盖存储设备上的数据，使其无法恢复。",limitation:"数据擦除不是一次性的，需要多次擦除才能确保数据无法恢复。数据擦除的效率较低，需要较长的时间。数据擦除的效果受到存储介质的影响，如固态硬盘（SSD）的数据擦除效果较差。",references:[{title:"硬盘数据安全擦除 - 百度百科",link:"https://baike.baidu.com/item/%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E6%93%A6%E9%99%A4/3496982?fromModule=search-result_lemma-recommend"}],updated:"2024-01-29"}},Ft=Object.freeze(Object.defineProperty({__proto__:null,A0050:Lt,default:xt},Symbol.toStringTag,{value:"Module"})),Ut={title:"安全意识培训",category:"AC01",summary:"安全意识培训是一种组织内部的培训活动，旨在提高员工对信息安全、网络安全和组织内部政策的认识和理解，以减少潜在的安全风险和防范安全威胁。",description:"该培训通常涵盖密码管理、网络钓鱼防范、社会工程学攻击识别、数据保护、物理安全等方面，旨在促使员工养成安全意识和良好的信息安全实践，以加强整体安全防护。",limitation:"安全意识培训的局限性在于可能难以维持员工对安全问题的持久关注，需要定期更新内容以适应不断变化的威胁，并难以测量培训的长期效果。",references:[],updated:"2024-01-11"},Gt={A0051:Ut},Nt=Object.freeze(Object.defineProperty({__proto__:null,A0051:Ut,default:Gt},Symbol.toStringTag,{value:"Module"})),Jt={title:"内部审查机制",category:"AC03",summary:"公司员工内部审查机制是指公司为监督和评估员工行为、确保遵守公司政策和规定而建立的一系列审查程序和措施。",description:"场景可能包括但不限于：行为合规性审查： 审查员工的行为是否符合公司的道德和法规要求，包括不涉及欺诈、腐败、贿赂等不当行为。数据访问审查： 监视员工对敏感数据和公司资源的访问，以确保访问仅限于工作职责范围内。网络活动审查： 对员工在公司网络上的活动进行监控，以防范网络安全风险和不当使用公司资源。内部调查： 当有违规行为或举报时，进行内部调查以核实相关情况。等",limitation:"公司员工内部审查机制的局限性在于需要在监管与员工隐私之间找到平衡，过度的审查可能侵犯个人隐私权，引起员工不满并降低工作满意度，同时审查程序需严格遵守法规以防合规性风险，另外，审查机制可能受到内部偏见或错误的影响，导致虚假的审查结果。",references:[],updated:"2024-01-11"},qt={A0052:Jt},Qt=Object.freeze(Object.defineProperty({__proto__:null,A0052:Jt,default:qt},Symbol.toStringTag,{value:"Module"})),Vt={title:"公关危机响应",category:"AC04",summary:"公关危机响应是指组织在面临负面舆情、声誉威胁或危机事件时，采取积极主动的沟通和应对措施，以减轻负面影响、保护声誉，并恢复公众信任的过程。",description:"其手法包括及时公开透明信息、有效危机管理、制定危机沟通计划、与利益相关者保持开放对话，以及采取积极改进和补救措施。",limitation:"舆情风险难以预测、公众情绪难以掌控、虚假信息的传播速度等挑战",references:[{title:"用户想要什么样的公关响应？ ",link:"https://www.sohu.com/a/723638415_121654938"}],updated:"2024-01-11"},Wt={A0053:Vt},Xt=Object.freeze(Object.defineProperty({__proto__:null,A0053:Vt,default:Wt},Symbol.toStringTag,{value:"Module"})),Yt={title:"合规治理",category:"AC01",summary:"合规治理指的是组织采取一系列制度、政策、流程和控制措施，以确保其业务活动在法律法规、行业标准和内部规定的范围内进行，并遵守相关合规要求。",description:"合规治理的手段包括但不限于：建立合规框架： 制定明确的合规政策、规程和标准，确保员工了解并遵守相关法规和公司规定。培训和教育： 向员工提供合规培训，使其了解相关法规和组织的合规要求，增强合规意识。风险评估和监测： 定期进行合规风险评估，监测业务活动，及时发现和解决可能存在的合规风险。内部合规审计： 进行内部审计，确保业务活动符合合规政策和法规要求。合规报告和沟通： 向利益相关者提供合规报告，确保透明度和及时沟通。建立合规团队： 设立专门的合规团队或聘请合规专业人员，负责监督和推动合规事务。",limitation:"合规治理面临一些局限性，首先，法规的复杂性和不断变化使得合规治理变得复杂且不断需要更新。文化差异也是一大挑战，因为不同地区和国家对合规的理解和期望存在差异。此外，人为因素可能对合规治理的有效性产生影响，需要通过培训和文化建设来强化员工遵守合规的意识。技术进步带来的新业务模式和应用也可能带来新的合规挑战，而建立和维护合规治理体系可能需要显著的人力、技术和财务资源投入，这也是一项不可忽视的成本。",references:[{title:"如何做好合规管理、搭建合规体系?",link:"https://jxj.huainan.gov.cn/jgsz/ksdh/xzspfwk/ywgz/551602263.html"}],updated:"2024-01-11"},Zt={A0054:Yt,"A0054-001":{title:"APP合规治理",category:"AC01",summary:"APP合规治理是指确保APP的开发、运营和使用都符合相关法律法规、监管要求和行业标准，并保障用户权益的过程。它涉及到多个方面，如个人信息保护、数据安全、隐私政策、内容合规等。",description:"为了实现APP合规治理，需要遵循一系列规定和标准，如《网络安全法》、《消费者权益保护法》、《数据安全法》、《个人信息保护法》等。同时，还需要关注APP所涉及的具体行业标准和监管要求，如金融、医疗、教育等领域的特殊规定。APP合规治理的目标是确保APP的开发和运营过程中，能够遵守所有适用的法律法规和行业标准，保护用户的个人信息和隐私，防止数据泄露和滥用，以及确保APP的内容符合社会道德和公共利益。为了实现这一目标，APP运营主体需要建立完善的合规管理体系，制定详细的合规政策和流程，加强内部培训和管理，同时配合监管机构的检查和指导，及时整改不合规问题，以确保APP的合规运营。",limitation:"移动应用面临的法规环境可能随时变化，而且不同国家和地区的法规要求各异，这使得合规治理变得复杂和具有挑战性。",references:[],updated:"2024-01-25"}},$t=Object.freeze(Object.defineProperty({__proto__:null,A0054:Yt,default:Zt},Symbol.toStringTag,{value:"Module"})),ei={title:"漏洞识别",category:"AC03",summary:"漏洞识别是指对计算机系统、网络或应用程序中存在的潜在安全漏洞进行检测和识别的过程。",description:"漏洞识别通常包括以下步骤：扫描和自动化工具： 使用自动化工具和扫描器对系统、网络或应用程序进行全面扫描，以发现已知的漏洞，包括常见的安全漏洞和配置错误。手动审查： 安全专业人员进行手动审查，通过深入分析系统、代码或配置，发现那些自动化工具可能漏掉的漏洞或新型漏洞。漏洞数据库： 利用漏洞数据库，了解最新的已知漏洞信息，包括漏洞的描述、修复建议和已发布的安全补丁。系统漏洞： 识别操作系统、网络设备或其他基础设施中的漏洞，包括未应用安全补丁的系统。应用程序漏洞： 通过对应用程序源代码或二进制代码的审查，发现可能存在的漏洞，例如输入验证问题、缓冲区溢出等。配置错误： 检查系统和应用程序的配置是否存在安全漏洞，例如默认密码、权限设置不当等。",limitation:"漏洞识别面临一些局限性，首先，漏洞数据库的不完善性使得某些漏洞可能未被覆盖。其次，自动化工具和扫描器可能产生虚假阳性，即错误地标识出并不存在的漏洞，同时也可能漏掉真实存在的漏洞，形成虚假阴性。此外，对于复杂的应用程序和定制开发的系统，仅仅依赖自动化工具可能无法全面发现所有漏洞，手动审查的成本较高。因此，漏洞识别需要综合运用多种手段，包括自动化工具、手动审查、漏洞数据库的更新以及定期的系统审计，以提高全面性和准确性。",references:[],updated:"2024-01-11"},ti={A0055:ei},ii=Object.freeze(Object.defineProperty({__proto__:null,A0055:ei,default:ti},Symbol.toStringTag,{value:"Module"})),ri={title:"漏洞修复",category:"AC04",summary:"漏洞修复是指在识别到计算机系统、网络或应用程序中存在安全漏洞后，采取一系列措施对这些漏洞进行修补或消除，以减少潜在攻击者利用漏洞进行未经授权访问、数据泄露、破坏等恶意活动的风险。",description:"漏洞修复的一些主要手段包括：安全补丁应用： 制造商或开发者发布的安全补丁通常包含了已知漏洞的修复。组织应当及时应用这些安全补丁，以确保系统的漏洞得到修复。系统配置更新： 漏洞修复还包括对系统和应用程序的配置进行更新，以修复可能导致漏洞的配置错误，例如禁用默认密码、限制不必要的服务等。代码审查和修复： 针对应用程序的漏洞，进行源代码或二进制代码的审查，发现潜在的安全问题并进行修复。网络安全设备配置： 针对网络设备和安全设备，进行配置更新和修复，以弥补潜在的漏洞。数据加密和访问控制： 采用数据加密技术和强化访问控制，以提高系统的整体安全性。",limitation:"漏洞修复的局限性：延迟和复杂性： 一些漏洞修复可能需要时间来制定、测试和应用。这种延迟可能给攻击者留下足够的时间进行攻击。不完全的修复： 有时修复措施可能会引入新的问题，或者在尝试修复一个漏洞时可能遗漏其他漏洞。依赖供应商： 如果漏洞涉及到硬件或软件供应商，修复的速度和有效性可能受到供应商的合作和支持程度的影响。复杂性和成本： 对于复杂的系统和大规模的网络，漏洞修复可能变得复杂且成本较高，特别是在涉及到业务连续性的情况下。",references:[],updated:"2024-01-11"},oi={A0056:ri},ai=Object.freeze(Object.defineProperty({__proto__:null,A0056:ri,default:oi},Symbol.toStringTag,{value:"Module"})),li={title:"增加审批流程",category:"AC01",summary:"增加审批流程是指在组织或项目中引入更多的审批步骤，以确保决策的合法性、合规性和可追溯性。这可以涉及到各种方面，如项目管理、财务决策、人力资源等。",description:"一些手段和实践包括：审批人员设定： 确定每个审批步骤的审批人员，通常基于其在组织中的职责和权限。审批条件和规则： 明确触发审批的条件和规则，例如超过一定金额的开支、关键决策等。电子审批系统： 利用电子审批工具来自动化和简化整个审批流程，提高效率并减少人为错误。审批日志和记录： 记录每个审批步骤的决策，以便审计和追溯审批过程。",limitation:"局限性：效率问题： 过多的审批步骤可能导致决策变得缓慢，降低工作效率。人为错误： 在手动审批流程中，由于人为因素，可能存在错误或疏漏。流程复杂性： 过于复杂的审批流程可能难以理解和管理，增加了维护的难度。适用场景限制： 不是所有场景都需要增加审批流程，某些简单的决策可能会因此显得繁琐。",references:[],updated:"2024-01-11"},ni={A0057:li},di=Object.freeze(Object.defineProperty({__proto__:null,A0057:li,default:ni},Symbol.toStringTag,{value:"Module"})),ci={title:"灾难恢复",category:"AC04",summary:"灾难恢复机制是指组织为了应对各种突发性灾难事件而制定的一套计划和程序，旨在确保业务的连续性和迅速有效地恢复到正常运营状态。这包括自然灾害、人为事故、技术故障等各种紧急情况。",description:"一些常见的手段和实践包括：备份和恢复策略： 定期备份关键数据和系统配置，确保能够迅速还原到灾难前的状态。冗余系统和设备： 部署冗余的硬件、网络设备和系统，以防主要设备或系统发生故障。灾难恢复站点： 设立备用的工作场所，以确保员工可以在主要办公地点不可用时继续工作。应急通信计划： 确保有可靠的通信手段，使组织内部和外部能够有效地协调应对灾难。定期演练： 对灾难恢复计划进行定期演练，以确保团队熟悉程序，并发现和解决潜在问题。",limitation:"局限性：成本问题： 建立完备的灾难恢复机制可能需要大量投资，对于一些小型组织而言可能难以负担。无法预测的灾难： 有些灾难是无法预测和预防的，因此灾难恢复机制可能无法覆盖所有情况。依赖供应链： 如果供应链中的某个环节受到影响，可能会影响到灾难恢复机制的执行。人为因素： 人为错误、失误或疏忽可能导致灾难恢复计划的执行失败。",references:[],updated:"2024-01-11"},ui={A0058:ci},si=Object.freeze(Object.defineProperty({__proto__:null,A0058:ci,default:ui},Symbol.toStringTag,{value:"Module"})),mi={title:"异常访问行为识别",category:"AC03",summary:"异常行为识别是指通过对系统、网络或应用中用户的行为进行实时监控和分析，识别与正常行为模式明显不同的活动，从而发现潜在的异常、欺诈或安全威胁。",description:"异常行为识别的一些关键方面：建模正常行为： 首先，系统需要学习和建模用户或实体的正常行为模式。这可以通过分析历史数据、用户行为模式、设备特征等方式进行。监控实时行为： 在建立了正常行为模型之后，系统会持续监控实时行为。这包括用户的登录、访问模式、交互行为、数据访问等。检测异常行为： 系统会使用事先建立的模型和规则，检测与正常行为模式显著不符的行为。这可能涉及到多种技术，包括统计分析、机器学习、规则引擎等。实时响应： 一旦发现异常行为，系统应能够立即采取相应措施，例如发出警报、中断访问、强制用户重新身份验证等。迭代优化： 异常行为检测系统需要不断迭代和优化，以适应不断变化的威胁和环境。这可能包括更新模型、调整规则、采纳新的算法等。在信息安全领域，异常行为检测可用于识别入侵、恶意软件、未经授权的访问等。在金融领域，它可用于发现信用卡欺诈、洗钱等活动。在健康保健领域，异常行为检测可用于监测患者的生理数据，识别潜在的健康问题。",limitation:"异常行为检测在实际应用中存在一些局限性。其中包括误报率和漏报率的问题，系统可能错误地标记正常行为为异常或者错过真正的异常行为。对抗性攻击可能使系统更容易规避检测，而概念漂移、隐私问题、资源消耗和不平衡的数据分布也是需要面对的挑战。在设计和应用异常行为检测系统时，需要综合考虑这些局限性，并采取相应的措施以提高系统的鲁棒性和性能。",references:[],updated:"2024-01-18"},Ai={A0059:mi},pi=Object.freeze(Object.defineProperty({__proto__:null,A0059:mi,default:Ai},Symbol.toStringTag,{value:"Module"})),yi={title:"异常访问来源识别",category:"AC03",summary:"异常访问来源识别指的是对用户或系统的访问来源进行分析和评估，以确定是否存在异常或潜在的威胁。这包括对访问系统的IP地址、设备类型、地理位置、网络行为等信息进行检查，从而识别可能的异常或恶意活动。",description:"异常访问来源判断可以包括以下方面：IP地址分析： 对访问系统的IP地址进行分析，检查是否存在来自异常地理位置、匿名代理、恶意网络的访问。设备指纹识别： 通过分析用户设备的特征，如操作系统、浏览器版本、设备类型等，判断是否有异常的设备访问。行为模式分析： 对用户的行为模式进行分析，包括访问时间、访问频率、页面浏览顺序等，检测是否存在不寻常的行为模式。用户身份验证： 还可以通过用户身份验证来确认用户的真实身份，以防止冒充或伪造的访问。新的思路还包括：识别该页面访问链接的分享者是否存在异常、设置并判断页面访问令牌是否有效等方式",limitation:"存在一定的误报率，需要结合其他方式进行综合判断，或通过累加计数来提升识别准确率。",references:[],updated:"2024-01-18"},fi={A0060:yi},gi=Object.freeze(Object.defineProperty({__proto__:null,A0060:yi,default:fi},Symbol.toStringTag,{value:"Module"})),_i={title:"降低回报",category:"AC04",summary:"降低攻击者在持续性攻击下的回报",description:"一些典型的降低回报方式，譬如：在持续性拉新下降低奖励金；在游戏中持续性打金，降低宝物爆率或打怪分值等",limitation:"降低回报是一种降低吸引力的优先手段，但只要还有价值，就难以完全控制；对于积极性较高的高价值用户会有较大的体验影响，进而影响积极性",references:[],updated:"2024-01-24"},bi={A0061:_i},Pi=Object.freeze(Object.defineProperty({__proto__:null,A0061:_i,default:bi},Symbol.toStringTag,{value:"Module"})),ji={title:"视频监控",category:"AC02",summary:"视频监控是一种利用摄像头、监视器和计算机软硬件等技术手段，对特定区域进行实时监控和远程控制的技术。",description:"传统的监控系统包括前端摄像机、传输线缆和视频监控平台。摄像机可分为网络数字摄像机和模拟摄像机，可作为前端视频图像信号的采集。视频监控以其直观、准确、及时和信息内容丰富而广泛应用于许多场合。如今的监控系统可以使用智能手机担当，同时对图像进行自动识别、存储和自动报警。视频数据通过3G/4G/WIFI传回控制主机，主机可对图像进行实时观看、录入、回放、调出及储存等操作，从而实现移动互联的视频监控。",limitation:"视频监控较为依赖人员对画面的识别，具备一定的滞后性",references:[{title:"视频监控",link:"https://baike.baidu.com/item/%E7%9B%91%E6%8E%A7/157510?fromtitle=%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7&fromid=9032286&fromModule=lemma_search-box"}],updated:"2024-01-24"},Oi={A0062:ji},Ci=Object.freeze(Object.defineProperty({__proto__:null,A0062:ji,default:Oi},Symbol.toStringTag,{value:"Module"})),Si={title:"密码复杂性要求",category:"AC01",summary:"密码复杂性要求是指在设置密码时，系统或服务对密码的一些规定和要求，以确保密码足够强壮，难以被猜测或破解。",description:"这些要求通常包括以下方面：长度： 要求密码的最小长度。更长的密码通常更安全，因为破解起来更为困难。字符种类： 要求密码包含不同种类的字符，如大写字母、小写字母、数字和特殊符号。这样可以增加密码的复杂性。避免常用密码： 禁止使用容易被猜测的常见密码，如“password”或“123456”。不允许字典词： 禁止使用字典中的单词，以防止通过字典攻击破解密码。定期更改： 要求用户定期更改密码，以减少密码被滥用的风险。不允许重复字符： 避免使用相同的字符重复出现在密码中。不允许与用户名相同： 禁止密码与用户名相同或包含用户名的部分。历史密码： 记录先前使用过的密码，确保新密码不与先前使用过的密码相同。账户锁定： 当用户多次输入错误密码时，锁定账户以防止暴力破解攻击。",limitation:"首先，过于严格的要求可能导致用户采用难以记忆的密码，进而将其记录在不安全的地方或选择使用弱密码。其次，强制用户定期更改密码可能促使他们采用易于猜测的密码模式，如在密码后添加数字或特殊字符。此外，复杂性要求主要抵御的是暴力破解和字典攻击，对于一些高级攻击方式，如社会工程学攻击，其防御能力相对有限。最后，设置过于复杂的密码规则可能降低用户体验，使得用户更容易采取不安全的替代方案，影响整体安全防护的有效性。",references:[{title:"适用于 Microsoft 365 密码的密码策略建议",link:"https://learn.microsoft.com/zh-cn/microsoft-365/admin/misc/password-policy-recommendations?view=o365-worldwide"},{title:"说说密码强度规则",link:"https://zhuanlan.zhihu.com/p/25545606"}],updated:"2024-02-01"},Ti={A0063:Si},Ii=Object.freeze(Object.defineProperty({__proto__:null,A0063:Si,default:Ti},Symbol.toStringTag,{value:"Module"})),hi=Object.assign({"./A0001.json":i,"./A0002.json":a,"./A0003.json":d,"./A0004.json":s,"./A0005.json":p,"./A0006.json":g,"./A0007.json":P,"./A0008.json":C,"./A0009.json":I,"./A0010.json":M,"./A0011.json":D,"./A0012.json":R,"./A0013.json":K,"./A0014.json":F,"./A0015.json":N,"./A0016.json":Q,"./A0017.json":X,"./A0018.json":$,"./A0019.json":ie,"./A0020.json":ae,"./A0021.json":de,"./A0022.json":se,"./A0023.json":pe,"./A0024.json":ge,"./A0025.json":Pe,"./A0026.json":Ce,"./A0027.json":Ie,"./A0028.json":Me,"./A0029.json":De,"./A0030.json":Re,"./A0031.json":Ke,"./A0032.json":Fe,"./A0033.json":Ne,"./A0034.json":Qe,"./A0035.json":Xe,"./A0036.json":$e,"./A0037.json":it,"./A0038.json":at,"./A0039.json":dt,"./A0040.json":st,"./A0041.json":pt,"./A0042.json":gt,"./A0043.json":Pt,"./A0044.json":Ct,"./A0045.json":It,"./A0046.json":Mt,"./A0047.json":Dt,"./A0048.json":Rt,"./A0049.json":Kt,"./A0050.json":Ft,"./A0051.json":Nt,"./A0052.json":Qt,"./A0053.json":Xt,"./A0054.json":$t,"./A0055.json":ii,"./A0056.json":ai,"./A0057.json":di,"./A0058.json":si,"./A0059.json":pi,"./A0060.json":gi,"./A0061.json":Pi,"./A0062.json":Ci,"./A0063.json":Ii}),Ei={avoidances:Object.values(hi).reduce(((e,t)=>({...e,...t.default})),{})};export{Ei as a};

{
  "A0002": {
    "title": "接口签名校验",
    "category": "AC01",
    "summary": "对接口发送请求进行完整性签名和校验。",
    "description": "也称接口验签或接口签名校验。因为无法保证用户端数据完整性，可以通过对请求数据进行哈希算法签名和服务端再校验来确保数据未经过篡改。需要注意的是：数据的完整性紧密依赖于哈希算法的强壮性，像MD5算法这种弱哈希算法已经较难保证数据的完整性。此外，目前接口签名更多地被应用在自动化请求识别对抗环节，严格来说接口签名本身并不具备人机识别能力，目前的对抗点更多是在于对自定义签名算法的复杂度和隐藏上，譬如终端应用加固（A013）、数据隐藏（A039）、算法白盒化、动态秘钥、WebAsm等。",
    "limitation": "接口签名用来保证数据传输过程的完整性是没有问题的，不过因接口签名目前广泛被用在防止自动化的环节，这使得接口签名面临着强对抗。因为签名算法必须以某种形式存在于用户终端，相当于对用户可见。攻击者通过解析算法、调用签名接口、模拟点击等方式均可破解接口签名算法，来实现对请求的自动化伪造。",
    "references": [
      {
        "title": "smart-cloud",
        "description": "一个开源 spring cloud 脚手架，具备接口签名功能",
        "link": "https://github.com/smart-cloud/smart-cloud-examples#%E4%BA%8C%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8"
      }
    ],
    "updated": "2024-01-11"
  }
}